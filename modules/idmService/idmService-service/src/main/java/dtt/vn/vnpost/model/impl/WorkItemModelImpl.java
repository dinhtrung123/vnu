/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package dtt.vn.vnpost.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import dtt.vn.vnpost.model.WorkItem;
import dtt.vn.vnpost.model.WorkItemModel;
import dtt.vn.vnpost.model.WorkItemSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the WorkItem service. Represents a row in the &quot;idm_workitem&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>WorkItemModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WorkItemImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see WorkItemImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class WorkItemModelImpl
	extends BaseModelImpl<WorkItem> implements WorkItemModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a work item model instance should use the <code>WorkItem</code> interface instead.
	 */
	public static final String TABLE_NAME = "idm_workitem";

	public static final Object[][] TABLE_COLUMNS = {
		{"workItemId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"title", Types.VARCHAR},
		{"status", Types.VARCHAR}, {"statusResponse", Types.VARCHAR},
		{"startTime", Types.TIMESTAMP}, {"endTime", Types.TIMESTAMP},
		{"accountId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("workItemId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusResponse", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("accountId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table idm_workitem (workItemId LONG not null primary key,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,title VARCHAR(75) null,status VARCHAR(75) null,statusResponse VARCHAR(75) null,startTime DATE null,endTime DATE null,accountId LONG)";

	public static final String TABLE_SQL_DROP = "drop table idm_workitem";

	public static final String ORDER_BY_JPQL =
		" ORDER BY workItem.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY idm_workitem.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.dtt.vn.vnpost.model.WorkItem"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.dtt.vn.vnpost.model.WorkItem"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.dtt.vn.vnpost.model.WorkItem"),
		true);

	public static final long ACCOUNTID_COLUMN_BITMASK = 1L;

	public static final long TITLE_COLUMN_BITMASK = 2L;

	public static final long USERID_COLUMN_BITMASK = 4L;

	public static final long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WorkItem toModel(WorkItemSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WorkItem model = new WorkItemImpl();

		model.setWorkItemId(soapModel.getWorkItemId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTitle(soapModel.getTitle());
		model.setStatus(soapModel.getStatus());
		model.setStatusResponse(soapModel.getStatusResponse());
		model.setStartTime(soapModel.getStartTime());
		model.setEndTime(soapModel.getEndTime());
		model.setAccountId(soapModel.getAccountId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WorkItem> toModels(WorkItemSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WorkItem> models = new ArrayList<WorkItem>(soapModels.length);

		for (WorkItemSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"lock.expiration.time.dtt.vn.vnpost.model.WorkItem"));

	public WorkItemModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _workItemId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setWorkItemId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _workItemId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return WorkItem.class;
	}

	@Override
	public String getModelClassName() {
		return WorkItem.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<WorkItem, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<WorkItem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<WorkItem, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((WorkItem)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<WorkItem, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<WorkItem, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(WorkItem)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<WorkItem, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<WorkItem, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, WorkItem>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			WorkItem.class.getClassLoader(), WorkItem.class,
			ModelWrapper.class);

		try {
			Constructor<WorkItem> constructor =
				(Constructor<WorkItem>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<WorkItem, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<WorkItem, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<WorkItem, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<WorkItem, Object>>();
		Map<String, BiConsumer<WorkItem, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<WorkItem, ?>>();

		attributeGetterFunctions.put(
			"workItemId",
			new Function<WorkItem, Object>() {

				@Override
				public Object apply(WorkItem workItem) {
					return workItem.getWorkItemId();
				}

			});
		attributeSetterBiConsumers.put(
			"workItemId",
			new BiConsumer<WorkItem, Object>() {

				@Override
				public void accept(WorkItem workItem, Object workItemId) {
					workItem.setWorkItemId((Long)workItemId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<WorkItem, Object>() {

				@Override
				public Object apply(WorkItem workItem) {
					return workItem.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<WorkItem, Object>() {

				@Override
				public void accept(WorkItem workItem, Object groupId) {
					workItem.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<WorkItem, Object>() {

				@Override
				public Object apply(WorkItem workItem) {
					return workItem.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<WorkItem, Object>() {

				@Override
				public void accept(WorkItem workItem, Object userId) {
					workItem.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<WorkItem, Object>() {

				@Override
				public Object apply(WorkItem workItem) {
					return workItem.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<WorkItem, Object>() {

				@Override
				public void accept(WorkItem workItem, Object createDate) {
					workItem.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<WorkItem, Object>() {

				@Override
				public Object apply(WorkItem workItem) {
					return workItem.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<WorkItem, Object>() {

				@Override
				public void accept(WorkItem workItem, Object modifiedDate) {
					workItem.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"title",
			new Function<WorkItem, Object>() {

				@Override
				public Object apply(WorkItem workItem) {
					return workItem.getTitle();
				}

			});
		attributeSetterBiConsumers.put(
			"title",
			new BiConsumer<WorkItem, Object>() {

				@Override
				public void accept(WorkItem workItem, Object title) {
					workItem.setTitle((String)title);
				}

			});
		attributeGetterFunctions.put(
			"status",
			new Function<WorkItem, Object>() {

				@Override
				public Object apply(WorkItem workItem) {
					return workItem.getStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"status",
			new BiConsumer<WorkItem, Object>() {

				@Override
				public void accept(WorkItem workItem, Object status) {
					workItem.setStatus((String)status);
				}

			});
		attributeGetterFunctions.put(
			"statusResponse",
			new Function<WorkItem, Object>() {

				@Override
				public Object apply(WorkItem workItem) {
					return workItem.getStatusResponse();
				}

			});
		attributeSetterBiConsumers.put(
			"statusResponse",
			new BiConsumer<WorkItem, Object>() {

				@Override
				public void accept(WorkItem workItem, Object statusResponse) {
					workItem.setStatusResponse((String)statusResponse);
				}

			});
		attributeGetterFunctions.put(
			"startTime",
			new Function<WorkItem, Object>() {

				@Override
				public Object apply(WorkItem workItem) {
					return workItem.getStartTime();
				}

			});
		attributeSetterBiConsumers.put(
			"startTime",
			new BiConsumer<WorkItem, Object>() {

				@Override
				public void accept(WorkItem workItem, Object startTime) {
					workItem.setStartTime((Date)startTime);
				}

			});
		attributeGetterFunctions.put(
			"endTime",
			new Function<WorkItem, Object>() {

				@Override
				public Object apply(WorkItem workItem) {
					return workItem.getEndTime();
				}

			});
		attributeSetterBiConsumers.put(
			"endTime",
			new BiConsumer<WorkItem, Object>() {

				@Override
				public void accept(WorkItem workItem, Object endTime) {
					workItem.setEndTime((Date)endTime);
				}

			});
		attributeGetterFunctions.put(
			"accountId",
			new Function<WorkItem, Object>() {

				@Override
				public Object apply(WorkItem workItem) {
					return workItem.getAccountId();
				}

			});
		attributeSetterBiConsumers.put(
			"accountId",
			new BiConsumer<WorkItem, Object>() {

				@Override
				public void accept(WorkItem workItem, Object accountId) {
					workItem.setAccountId((Long)accountId);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getWorkItemId() {
		return _workItemId;
	}

	@Override
	public void setWorkItemId(long workItemId) {
		_workItemId = workItemId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask |= TITLE_COLUMN_BITMASK;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return "";
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@JSON
	@Override
	public String getStatusResponse() {
		if (_statusResponse == null) {
			return "";
		}
		else {
			return _statusResponse;
		}
	}

	@Override
	public void setStatusResponse(String statusResponse) {
		_statusResponse = statusResponse;
	}

	@JSON
	@Override
	public Date getStartTime() {
		return _startTime;
	}

	@Override
	public void setStartTime(Date startTime) {
		_startTime = startTime;
	}

	@JSON
	@Override
	public Date getEndTime() {
		return _endTime;
	}

	@Override
	public void setEndTime(Date endTime) {
		_endTime = endTime;
	}

	@JSON
	@Override
	public long getAccountId() {
		return _accountId;
	}

	@Override
	public void setAccountId(long accountId) {
		_columnBitmask |= ACCOUNTID_COLUMN_BITMASK;

		if (!_setOriginalAccountId) {
			_setOriginalAccountId = true;

			_originalAccountId = _accountId;
		}

		_accountId = accountId;
	}

	public long getOriginalAccountId() {
		return _originalAccountId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, WorkItem.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WorkItem toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WorkItemImpl workItemImpl = new WorkItemImpl();

		workItemImpl.setWorkItemId(getWorkItemId());
		workItemImpl.setGroupId(getGroupId());
		workItemImpl.setUserId(getUserId());
		workItemImpl.setCreateDate(getCreateDate());
		workItemImpl.setModifiedDate(getModifiedDate());
		workItemImpl.setTitle(getTitle());
		workItemImpl.setStatus(getStatus());
		workItemImpl.setStatusResponse(getStatusResponse());
		workItemImpl.setStartTime(getStartTime());
		workItemImpl.setEndTime(getEndTime());
		workItemImpl.setAccountId(getAccountId());

		workItemImpl.resetOriginalValues();

		return workItemImpl;
	}

	@Override
	public int compareTo(WorkItem workItem) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), workItem.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WorkItem)) {
			return false;
		}

		WorkItem workItem = (WorkItem)obj;

		long primaryKey = workItem.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		WorkItemModelImpl workItemModelImpl = this;

		workItemModelImpl._originalUserId = workItemModelImpl._userId;

		workItemModelImpl._setOriginalUserId = false;

		workItemModelImpl._setModifiedDate = false;

		workItemModelImpl._originalTitle = workItemModelImpl._title;

		workItemModelImpl._originalAccountId = workItemModelImpl._accountId;

		workItemModelImpl._setOriginalAccountId = false;

		workItemModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WorkItem> toCacheModel() {
		WorkItemCacheModel workItemCacheModel = new WorkItemCacheModel();

		workItemCacheModel.workItemId = getWorkItemId();

		workItemCacheModel.groupId = getGroupId();

		workItemCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			workItemCacheModel.createDate = createDate.getTime();
		}
		else {
			workItemCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			workItemCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			workItemCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		workItemCacheModel.title = getTitle();

		String title = workItemCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			workItemCacheModel.title = null;
		}

		workItemCacheModel.status = getStatus();

		String status = workItemCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			workItemCacheModel.status = null;
		}

		workItemCacheModel.statusResponse = getStatusResponse();

		String statusResponse = workItemCacheModel.statusResponse;

		if ((statusResponse != null) && (statusResponse.length() == 0)) {
			workItemCacheModel.statusResponse = null;
		}

		Date startTime = getStartTime();

		if (startTime != null) {
			workItemCacheModel.startTime = startTime.getTime();
		}
		else {
			workItemCacheModel.startTime = Long.MIN_VALUE;
		}

		Date endTime = getEndTime();

		if (endTime != null) {
			workItemCacheModel.endTime = endTime.getTime();
		}
		else {
			workItemCacheModel.endTime = Long.MIN_VALUE;
		}

		workItemCacheModel.accountId = getAccountId();

		return workItemCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<WorkItem, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<WorkItem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<WorkItem, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((WorkItem)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<WorkItem, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<WorkItem, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<WorkItem, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((WorkItem)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, WorkItem>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _workItemId;
	private long _groupId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _title;
	private String _originalTitle;
	private String _status;
	private String _statusResponse;
	private Date _startTime;
	private Date _endTime;
	private long _accountId;
	private long _originalAccountId;
	private boolean _setOriginalAccountId;
	private long _columnBitmask;
	private WorkItem _escapedModel;

}