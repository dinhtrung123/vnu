/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package dtt.vn.vnpost.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import dtt.vn.vnpost.model.Nhom;
import dtt.vn.vnpost.model.NhomModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Nhom service. Represents a row in the &quot;data_group&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>NhomModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NhomImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see NhomImpl
 * @generated
 */
@ProviderType
public class NhomModelImpl extends BaseModelImpl<Nhom> implements NhomModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a nhom model instance should use the <code>Nhom</code> interface instead.
	 */
	public static final String TABLE_NAME = "data_group";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"ma", Types.VARCHAR}, {"ten", Types.VARCHAR},
		{"mota", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ma", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ten", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mota", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table data_group (id LONG not null primary key,ma VARCHAR(75) null,ten VARCHAR(75) null,mota VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table data_group";

	public static final String ORDER_BY_JPQL = " ORDER BY nhom.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY data_group.id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.dtt.vn.vnpost.model.Nhom"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.dtt.vn.vnpost.model.Nhom"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.dtt.vn.vnpost.model.Nhom"),
		true);

	public static final long MA_COLUMN_BITMASK = 1L;

	public static final long ID_COLUMN_BITMASK = 2L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"lock.expiration.time.dtt.vn.vnpost.model.Nhom"));

	public NhomModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Nhom.class;
	}

	@Override
	public String getModelClassName() {
		return Nhom.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Nhom, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Nhom, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Nhom, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Nhom)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Nhom, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Nhom, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Nhom)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Nhom, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Nhom, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Nhom>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Nhom.class.getClassLoader(), Nhom.class, ModelWrapper.class);

		try {
			Constructor<Nhom> constructor =
				(Constructor<Nhom>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Nhom, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Nhom, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Nhom, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Nhom, Object>>();
		Map<String, BiConsumer<Nhom, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Nhom, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<Nhom, Object>() {

				@Override
				public Object apply(Nhom nhom) {
					return nhom.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<Nhom, Object>() {

				@Override
				public void accept(Nhom nhom, Object id) {
					nhom.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"ma",
			new Function<Nhom, Object>() {

				@Override
				public Object apply(Nhom nhom) {
					return nhom.getMa();
				}

			});
		attributeSetterBiConsumers.put(
			"ma",
			new BiConsumer<Nhom, Object>() {

				@Override
				public void accept(Nhom nhom, Object ma) {
					nhom.setMa((String)ma);
				}

			});
		attributeGetterFunctions.put(
			"ten",
			new Function<Nhom, Object>() {

				@Override
				public Object apply(Nhom nhom) {
					return nhom.getTen();
				}

			});
		attributeSetterBiConsumers.put(
			"ten",
			new BiConsumer<Nhom, Object>() {

				@Override
				public void accept(Nhom nhom, Object ten) {
					nhom.setTen((String)ten);
				}

			});
		attributeGetterFunctions.put(
			"mota",
			new Function<Nhom, Object>() {

				@Override
				public Object apply(Nhom nhom) {
					return nhom.getMota();
				}

			});
		attributeSetterBiConsumers.put(
			"mota",
			new BiConsumer<Nhom, Object>() {

				@Override
				public void accept(Nhom nhom, Object mota) {
					nhom.setMota((String)mota);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getMa() {
		if (_ma == null) {
			return "";
		}
		else {
			return _ma;
		}
	}

	@Override
	public void setMa(String ma) {
		_columnBitmask |= MA_COLUMN_BITMASK;

		if (_originalMa == null) {
			_originalMa = _ma;
		}

		_ma = ma;
	}

	public String getOriginalMa() {
		return GetterUtil.getString(_originalMa);
	}

	@Override
	public String getTen() {
		if (_ten == null) {
			return "";
		}
		else {
			return _ten;
		}
	}

	@Override
	public void setTen(String ten) {
		_ten = ten;
	}

	@Override
	public String getMota() {
		if (_mota == null) {
			return "";
		}
		else {
			return _mota;
		}
	}

	@Override
	public void setMota(String mota) {
		_mota = mota;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Nhom.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Nhom toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NhomImpl nhomImpl = new NhomImpl();

		nhomImpl.setId(getId());
		nhomImpl.setMa(getMa());
		nhomImpl.setTen(getTen());
		nhomImpl.setMota(getMota());

		nhomImpl.resetOriginalValues();

		return nhomImpl;
	}

	@Override
	public int compareTo(Nhom nhom) {
		long primaryKey = nhom.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Nhom)) {
			return false;
		}

		Nhom nhom = (Nhom)obj;

		long primaryKey = nhom.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		NhomModelImpl nhomModelImpl = this;

		nhomModelImpl._originalMa = nhomModelImpl._ma;

		nhomModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Nhom> toCacheModel() {
		NhomCacheModel nhomCacheModel = new NhomCacheModel();

		nhomCacheModel.id = getId();

		nhomCacheModel.ma = getMa();

		String ma = nhomCacheModel.ma;

		if ((ma != null) && (ma.length() == 0)) {
			nhomCacheModel.ma = null;
		}

		nhomCacheModel.ten = getTen();

		String ten = nhomCacheModel.ten;

		if ((ten != null) && (ten.length() == 0)) {
			nhomCacheModel.ten = null;
		}

		nhomCacheModel.mota = getMota();

		String mota = nhomCacheModel.mota;

		if ((mota != null) && (mota.length() == 0)) {
			nhomCacheModel.mota = null;
		}

		return nhomCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Nhom, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Nhom, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Nhom, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Nhom)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Nhom, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Nhom, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Nhom, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Nhom)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Nhom>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _id;
	private String _ma;
	private String _originalMa;
	private String _ten;
	private String _mota;
	private long _columnBitmask;
	private Nhom _escapedModel;

}