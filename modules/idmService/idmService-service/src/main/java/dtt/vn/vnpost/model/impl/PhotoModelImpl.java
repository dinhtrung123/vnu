/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package dtt.vn.vnpost.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import dtt.vn.vnpost.model.Photo;
import dtt.vn.vnpost.model.PhotoModel;
import dtt.vn.vnpost.model.PhotoSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Photo service. Represents a row in the &quot;idm_photo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>PhotoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PhotoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PhotoImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class PhotoModelImpl extends BaseModelImpl<Photo> implements PhotoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a photo model instance should use the <code>Photo</code> interface instead.
	 */
	public static final String TABLE_NAME = "idm_photo";

	public static final Object[][] TABLE_COLUMNS = {
		{"imageId", Types.BIGINT}, {"className", Types.VARCHAR},
		{"classPK", Types.BIGINT}, {"description", Types.VARCHAR},
		{"thumbnailId", Types.BIGINT}, {"imageType", Types.INTEGER},
		{"contentType", Types.VARCHAR}, {"approved", Types.BOOLEAN},
		{"uploadDate", Types.TIMESTAMP}, {"message", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("imageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("className", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("classPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("thumbnailId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("imageType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("contentType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approved", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("uploadDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("message", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table idm_photo (imageId LONG not null primary key,className VARCHAR(75) null,classPK LONG,description VARCHAR(75) null,thumbnailId LONG,imageType INTEGER,contentType VARCHAR(75) null,approved BOOLEAN,uploadDate DATE null,message VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table idm_photo";

	public static final String ORDER_BY_JPQL = " ORDER BY photo.imageId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY idm_photo.imageId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.dtt.vn.vnpost.model.Photo"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.dtt.vn.vnpost.model.Photo"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.dtt.vn.vnpost.model.Photo"),
		true);

	public static final long CLASSNAME_COLUMN_BITMASK = 1L;

	public static final long CLASSPK_COLUMN_BITMASK = 2L;

	public static final long IMAGETYPE_COLUMN_BITMASK = 4L;

	public static final long IMAGEID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Photo toModel(PhotoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Photo model = new PhotoImpl();

		model.setImageId(soapModel.getImageId());
		model.setClassName(soapModel.getClassName());
		model.setClassPK(soapModel.getClassPK());
		model.setDescription(soapModel.getDescription());
		model.setThumbnailId(soapModel.getThumbnailId());
		model.setImageType(soapModel.getImageType());
		model.setContentType(soapModel.getContentType());
		model.setApproved(soapModel.isApproved());
		model.setUploadDate(soapModel.getUploadDate());
		model.setMessage(soapModel.getMessage());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Photo> toModels(PhotoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Photo> models = new ArrayList<Photo>(soapModels.length);

		for (PhotoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"lock.expiration.time.dtt.vn.vnpost.model.Photo"));

	public PhotoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _imageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setImageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _imageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Photo.class;
	}

	@Override
	public String getModelClassName() {
		return Photo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Photo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Photo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Photo, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Photo)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Photo, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Photo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Photo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Photo, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Photo, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Photo>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Photo.class.getClassLoader(), Photo.class, ModelWrapper.class);

		try {
			Constructor<Photo> constructor =
				(Constructor<Photo>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Photo, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Photo, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Photo, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Photo, Object>>();
		Map<String, BiConsumer<Photo, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Photo, ?>>();

		attributeGetterFunctions.put(
			"imageId",
			new Function<Photo, Object>() {

				@Override
				public Object apply(Photo photo) {
					return photo.getImageId();
				}

			});
		attributeSetterBiConsumers.put(
			"imageId",
			new BiConsumer<Photo, Object>() {

				@Override
				public void accept(Photo photo, Object imageId) {
					photo.setImageId((Long)imageId);
				}

			});
		attributeGetterFunctions.put(
			"className",
			new Function<Photo, Object>() {

				@Override
				public Object apply(Photo photo) {
					return photo.getClassName();
				}

			});
		attributeSetterBiConsumers.put(
			"className",
			new BiConsumer<Photo, Object>() {

				@Override
				public void accept(Photo photo, Object className) {
					photo.setClassName((String)className);
				}

			});
		attributeGetterFunctions.put(
			"classPK",
			new Function<Photo, Object>() {

				@Override
				public Object apply(Photo photo) {
					return photo.getClassPK();
				}

			});
		attributeSetterBiConsumers.put(
			"classPK",
			new BiConsumer<Photo, Object>() {

				@Override
				public void accept(Photo photo, Object classPK) {
					photo.setClassPK((Long)classPK);
				}

			});
		attributeGetterFunctions.put(
			"description",
			new Function<Photo, Object>() {

				@Override
				public Object apply(Photo photo) {
					return photo.getDescription();
				}

			});
		attributeSetterBiConsumers.put(
			"description",
			new BiConsumer<Photo, Object>() {

				@Override
				public void accept(Photo photo, Object description) {
					photo.setDescription((String)description);
				}

			});
		attributeGetterFunctions.put(
			"thumbnailId",
			new Function<Photo, Object>() {

				@Override
				public Object apply(Photo photo) {
					return photo.getThumbnailId();
				}

			});
		attributeSetterBiConsumers.put(
			"thumbnailId",
			new BiConsumer<Photo, Object>() {

				@Override
				public void accept(Photo photo, Object thumbnailId) {
					photo.setThumbnailId((Long)thumbnailId);
				}

			});
		attributeGetterFunctions.put(
			"imageType",
			new Function<Photo, Object>() {

				@Override
				public Object apply(Photo photo) {
					return photo.getImageType();
				}

			});
		attributeSetterBiConsumers.put(
			"imageType",
			new BiConsumer<Photo, Object>() {

				@Override
				public void accept(Photo photo, Object imageType) {
					photo.setImageType((Integer)imageType);
				}

			});
		attributeGetterFunctions.put(
			"contentType",
			new Function<Photo, Object>() {

				@Override
				public Object apply(Photo photo) {
					return photo.getContentType();
				}

			});
		attributeSetterBiConsumers.put(
			"contentType",
			new BiConsumer<Photo, Object>() {

				@Override
				public void accept(Photo photo, Object contentType) {
					photo.setContentType((String)contentType);
				}

			});
		attributeGetterFunctions.put(
			"approved",
			new Function<Photo, Object>() {

				@Override
				public Object apply(Photo photo) {
					return photo.getApproved();
				}

			});
		attributeSetterBiConsumers.put(
			"approved",
			new BiConsumer<Photo, Object>() {

				@Override
				public void accept(Photo photo, Object approved) {
					photo.setApproved((Boolean)approved);
				}

			});
		attributeGetterFunctions.put(
			"uploadDate",
			new Function<Photo, Object>() {

				@Override
				public Object apply(Photo photo) {
					return photo.getUploadDate();
				}

			});
		attributeSetterBiConsumers.put(
			"uploadDate",
			new BiConsumer<Photo, Object>() {

				@Override
				public void accept(Photo photo, Object uploadDate) {
					photo.setUploadDate((Date)uploadDate);
				}

			});
		attributeGetterFunctions.put(
			"message",
			new Function<Photo, Object>() {

				@Override
				public Object apply(Photo photo) {
					return photo.getMessage();
				}

			});
		attributeSetterBiConsumers.put(
			"message",
			new BiConsumer<Photo, Object>() {

				@Override
				public void accept(Photo photo, Object message) {
					photo.setMessage((String)message);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getImageId() {
		return _imageId;
	}

	@Override
	public void setImageId(long imageId) {
		_imageId = imageId;
	}

	@JSON
	@Override
	public String getClassName() {
		if (_className == null) {
			return "";
		}
		else {
			return _className;
		}
	}

	@Override
	public void setClassName(String className) {
		_columnBitmask |= CLASSNAME_COLUMN_BITMASK;

		if (_originalClassName == null) {
			_originalClassName = _className;
		}

		_className = className;
	}

	public String getOriginalClassName() {
		return GetterUtil.getString(_originalClassName);
	}

	@JSON
	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public long getThumbnailId() {
		return _thumbnailId;
	}

	@Override
	public void setThumbnailId(long thumbnailId) {
		_thumbnailId = thumbnailId;
	}

	@JSON
	@Override
	public int getImageType() {
		return _imageType;
	}

	@Override
	public void setImageType(int imageType) {
		_columnBitmask |= IMAGETYPE_COLUMN_BITMASK;

		if (!_setOriginalImageType) {
			_setOriginalImageType = true;

			_originalImageType = _imageType;
		}

		_imageType = imageType;
	}

	public int getOriginalImageType() {
		return _originalImageType;
	}

	@JSON
	@Override
	public String getContentType() {
		if (_contentType == null) {
			return "";
		}
		else {
			return _contentType;
		}
	}

	@Override
	public void setContentType(String contentType) {
		_contentType = contentType;
	}

	@JSON
	@Override
	public boolean getApproved() {
		return _approved;
	}

	@JSON
	@Override
	public boolean isApproved() {
		return _approved;
	}

	@Override
	public void setApproved(boolean approved) {
		_approved = approved;
	}

	@JSON
	@Override
	public Date getUploadDate() {
		return _uploadDate;
	}

	@Override
	public void setUploadDate(Date uploadDate) {
		_uploadDate = uploadDate;
	}

	@JSON
	@Override
	public String getMessage() {
		if (_message == null) {
			return "";
		}
		else {
			return _message;
		}
	}

	@Override
	public void setMessage(String message) {
		_message = message;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Photo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Photo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PhotoImpl photoImpl = new PhotoImpl();

		photoImpl.setImageId(getImageId());
		photoImpl.setClassName(getClassName());
		photoImpl.setClassPK(getClassPK());
		photoImpl.setDescription(getDescription());
		photoImpl.setThumbnailId(getThumbnailId());
		photoImpl.setImageType(getImageType());
		photoImpl.setContentType(getContentType());
		photoImpl.setApproved(isApproved());
		photoImpl.setUploadDate(getUploadDate());
		photoImpl.setMessage(getMessage());

		photoImpl.resetOriginalValues();

		return photoImpl;
	}

	@Override
	public int compareTo(Photo photo) {
		long primaryKey = photo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Photo)) {
			return false;
		}

		Photo photo = (Photo)obj;

		long primaryKey = photo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PhotoModelImpl photoModelImpl = this;

		photoModelImpl._originalClassName = photoModelImpl._className;

		photoModelImpl._originalClassPK = photoModelImpl._classPK;

		photoModelImpl._setOriginalClassPK = false;

		photoModelImpl._originalImageType = photoModelImpl._imageType;

		photoModelImpl._setOriginalImageType = false;

		photoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Photo> toCacheModel() {
		PhotoCacheModel photoCacheModel = new PhotoCacheModel();

		photoCacheModel.imageId = getImageId();

		photoCacheModel.className = getClassName();

		String className = photoCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			photoCacheModel.className = null;
		}

		photoCacheModel.classPK = getClassPK();

		photoCacheModel.description = getDescription();

		String description = photoCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			photoCacheModel.description = null;
		}

		photoCacheModel.thumbnailId = getThumbnailId();

		photoCacheModel.imageType = getImageType();

		photoCacheModel.contentType = getContentType();

		String contentType = photoCacheModel.contentType;

		if ((contentType != null) && (contentType.length() == 0)) {
			photoCacheModel.contentType = null;
		}

		photoCacheModel.approved = isApproved();

		Date uploadDate = getUploadDate();

		if (uploadDate != null) {
			photoCacheModel.uploadDate = uploadDate.getTime();
		}
		else {
			photoCacheModel.uploadDate = Long.MIN_VALUE;
		}

		photoCacheModel.message = getMessage();

		String message = photoCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			photoCacheModel.message = null;
		}

		return photoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Photo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Photo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Photo, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Photo)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Photo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Photo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Photo, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Photo)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Photo>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _imageId;
	private String _className;
	private String _originalClassName;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private String _description;
	private long _thumbnailId;
	private int _imageType;
	private int _originalImageType;
	private boolean _setOriginalImageType;
	private String _contentType;
	private boolean _approved;
	private Date _uploadDate;
	private String _message;
	private long _columnBitmask;
	private Photo _escapedModel;

}