/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package dtt.vn.vnpost.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import dtt.vn.vnpost.model.DanhMuc;
import dtt.vn.vnpost.model.DanhMucModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DanhMuc service. Represents a row in the &quot;data_item&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>DanhMucModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DanhMucImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DanhMucImpl
 * @generated
 */
@ProviderType
public class DanhMucModelImpl
	extends BaseModelImpl<DanhMuc> implements DanhMucModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a danh muc model instance should use the <code>DanhMuc</code> interface instead.
	 */
	public static final String TABLE_NAME = "data_item";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"nhom_id", Types.BIGINT}, {"ma", Types.VARCHAR},
		{"ten", Types.VARCHAR}, {"mota", Types.VARCHAR}, {"muc", Types.INTEGER},
		{"cha_id", Types.BIGINT}, {"thutu_hienthi", Types.INTEGER},
		{"ma_giapha", Types.VARCHAR}, {"trangthai", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nhom_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ma", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ten", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mota", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("muc", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("cha_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("thutu_hienthi", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("ma_giapha", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trangthai", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table data_item (id LONG not null primary key,nhom_id LONG,ma VARCHAR(75) null,ten VARCHAR(75) null,mota VARCHAR(75) null,muc INTEGER,cha_id LONG,thutu_hienthi INTEGER,ma_giapha VARCHAR(75) null,trangthai BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table data_item";

	public static final String ORDER_BY_JPQL =
		" ORDER BY danhMuc.thuTuHienThi ASC, danhMuc.ten ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY data_item.thutu_hienthi ASC, data_item.ten ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.dtt.vn.vnpost.model.DanhMuc"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.dtt.vn.vnpost.model.DanhMuc"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.dtt.vn.vnpost.model.DanhMuc"),
		true);

	public static final long CHAID_COLUMN_BITMASK = 1L;

	public static final long ID_COLUMN_BITMASK = 2L;

	public static final long MA_COLUMN_BITMASK = 4L;

	public static final long MUC_COLUMN_BITMASK = 8L;

	public static final long NHOMID_COLUMN_BITMASK = 16L;

	public static final long TEN_COLUMN_BITMASK = 32L;

	public static final long THUTUHIENTHI_COLUMN_BITMASK = 64L;

	public static final long TRANGTHAI_COLUMN_BITMASK = 128L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"lock.expiration.time.dtt.vn.vnpost.model.DanhMuc"));

	public DanhMucModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DanhMuc.class;
	}

	@Override
	public String getModelClassName() {
		return DanhMuc.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DanhMuc, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DanhMuc, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DanhMuc, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((DanhMuc)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DanhMuc, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DanhMuc, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DanhMuc)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DanhMuc, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DanhMuc, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DanhMuc>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DanhMuc.class.getClassLoader(), DanhMuc.class, ModelWrapper.class);

		try {
			Constructor<DanhMuc> constructor =
				(Constructor<DanhMuc>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<DanhMuc, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DanhMuc, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DanhMuc, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<DanhMuc, Object>>();
		Map<String, BiConsumer<DanhMuc, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DanhMuc, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<DanhMuc, Object>() {

				@Override
				public Object apply(DanhMuc danhMuc) {
					return danhMuc.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<DanhMuc, Object>() {

				@Override
				public void accept(DanhMuc danhMuc, Object id) {
					danhMuc.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"nhomId",
			new Function<DanhMuc, Object>() {

				@Override
				public Object apply(DanhMuc danhMuc) {
					return danhMuc.getNhomId();
				}

			});
		attributeSetterBiConsumers.put(
			"nhomId",
			new BiConsumer<DanhMuc, Object>() {

				@Override
				public void accept(DanhMuc danhMuc, Object nhomId) {
					danhMuc.setNhomId((Long)nhomId);
				}

			});
		attributeGetterFunctions.put(
			"ma",
			new Function<DanhMuc, Object>() {

				@Override
				public Object apply(DanhMuc danhMuc) {
					return danhMuc.getMa();
				}

			});
		attributeSetterBiConsumers.put(
			"ma",
			new BiConsumer<DanhMuc, Object>() {

				@Override
				public void accept(DanhMuc danhMuc, Object ma) {
					danhMuc.setMa((String)ma);
				}

			});
		attributeGetterFunctions.put(
			"ten",
			new Function<DanhMuc, Object>() {

				@Override
				public Object apply(DanhMuc danhMuc) {
					return danhMuc.getTen();
				}

			});
		attributeSetterBiConsumers.put(
			"ten",
			new BiConsumer<DanhMuc, Object>() {

				@Override
				public void accept(DanhMuc danhMuc, Object ten) {
					danhMuc.setTen((String)ten);
				}

			});
		attributeGetterFunctions.put(
			"moTa",
			new Function<DanhMuc, Object>() {

				@Override
				public Object apply(DanhMuc danhMuc) {
					return danhMuc.getMoTa();
				}

			});
		attributeSetterBiConsumers.put(
			"moTa",
			new BiConsumer<DanhMuc, Object>() {

				@Override
				public void accept(DanhMuc danhMuc, Object moTa) {
					danhMuc.setMoTa((String)moTa);
				}

			});
		attributeGetterFunctions.put(
			"muc",
			new Function<DanhMuc, Object>() {

				@Override
				public Object apply(DanhMuc danhMuc) {
					return danhMuc.getMuc();
				}

			});
		attributeSetterBiConsumers.put(
			"muc",
			new BiConsumer<DanhMuc, Object>() {

				@Override
				public void accept(DanhMuc danhMuc, Object muc) {
					danhMuc.setMuc((Integer)muc);
				}

			});
		attributeGetterFunctions.put(
			"chaId",
			new Function<DanhMuc, Object>() {

				@Override
				public Object apply(DanhMuc danhMuc) {
					return danhMuc.getChaId();
				}

			});
		attributeSetterBiConsumers.put(
			"chaId",
			new BiConsumer<DanhMuc, Object>() {

				@Override
				public void accept(DanhMuc danhMuc, Object chaId) {
					danhMuc.setChaId((Long)chaId);
				}

			});
		attributeGetterFunctions.put(
			"thuTuHienThi",
			new Function<DanhMuc, Object>() {

				@Override
				public Object apply(DanhMuc danhMuc) {
					return danhMuc.getThuTuHienThi();
				}

			});
		attributeSetterBiConsumers.put(
			"thuTuHienThi",
			new BiConsumer<DanhMuc, Object>() {

				@Override
				public void accept(DanhMuc danhMuc, Object thuTuHienThi) {
					danhMuc.setThuTuHienThi((Integer)thuTuHienThi);
				}

			});
		attributeGetterFunctions.put(
			"maGiaPha",
			new Function<DanhMuc, Object>() {

				@Override
				public Object apply(DanhMuc danhMuc) {
					return danhMuc.getMaGiaPha();
				}

			});
		attributeSetterBiConsumers.put(
			"maGiaPha",
			new BiConsumer<DanhMuc, Object>() {

				@Override
				public void accept(DanhMuc danhMuc, Object maGiaPha) {
					danhMuc.setMaGiaPha((String)maGiaPha);
				}

			});
		attributeGetterFunctions.put(
			"trangThai",
			new Function<DanhMuc, Object>() {

				@Override
				public Object apply(DanhMuc danhMuc) {
					return danhMuc.getTrangThai();
				}

			});
		attributeSetterBiConsumers.put(
			"trangThai",
			new BiConsumer<DanhMuc, Object>() {

				@Override
				public void accept(DanhMuc danhMuc, Object trangThai) {
					danhMuc.setTrangThai((Boolean)trangThai);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask |= ID_COLUMN_BITMASK;

		if (!_setOriginalId) {
			_setOriginalId = true;

			_originalId = _id;
		}

		_id = id;
	}

	public long getOriginalId() {
		return _originalId;
	}

	@Override
	public long getNhomId() {
		return _nhomId;
	}

	@Override
	public void setNhomId(long nhomId) {
		_columnBitmask |= NHOMID_COLUMN_BITMASK;

		if (!_setOriginalNhomId) {
			_setOriginalNhomId = true;

			_originalNhomId = _nhomId;
		}

		_nhomId = nhomId;
	}

	public long getOriginalNhomId() {
		return _originalNhomId;
	}

	@Override
	public String getMa() {
		if (_ma == null) {
			return "";
		}
		else {
			return _ma;
		}
	}

	@Override
	public void setMa(String ma) {
		_columnBitmask |= MA_COLUMN_BITMASK;

		if (_originalMa == null) {
			_originalMa = _ma;
		}

		_ma = ma;
	}

	public String getOriginalMa() {
		return GetterUtil.getString(_originalMa);
	}

	@Override
	public String getTen() {
		if (_ten == null) {
			return "";
		}
		else {
			return _ten;
		}
	}

	@Override
	public void setTen(String ten) {
		_columnBitmask = -1L;

		if (_originalTen == null) {
			_originalTen = _ten;
		}

		_ten = ten;
	}

	public String getOriginalTen() {
		return GetterUtil.getString(_originalTen);
	}

	@Override
	public String getMoTa() {
		if (_moTa == null) {
			return "";
		}
		else {
			return _moTa;
		}
	}

	@Override
	public void setMoTa(String moTa) {
		_moTa = moTa;
	}

	@Override
	public int getMuc() {
		return _muc;
	}

	@Override
	public void setMuc(int muc) {
		_columnBitmask |= MUC_COLUMN_BITMASK;

		if (!_setOriginalMuc) {
			_setOriginalMuc = true;

			_originalMuc = _muc;
		}

		_muc = muc;
	}

	public int getOriginalMuc() {
		return _originalMuc;
	}

	@Override
	public long getChaId() {
		return _chaId;
	}

	@Override
	public void setChaId(long chaId) {
		_columnBitmask |= CHAID_COLUMN_BITMASK;

		if (!_setOriginalChaId) {
			_setOriginalChaId = true;

			_originalChaId = _chaId;
		}

		_chaId = chaId;
	}

	public long getOriginalChaId() {
		return _originalChaId;
	}

	@Override
	public int getThuTuHienThi() {
		return _thuTuHienThi;
	}

	@Override
	public void setThuTuHienThi(int thuTuHienThi) {
		_columnBitmask = -1L;

		if (!_setOriginalThuTuHienThi) {
			_setOriginalThuTuHienThi = true;

			_originalThuTuHienThi = _thuTuHienThi;
		}

		_thuTuHienThi = thuTuHienThi;
	}

	public int getOriginalThuTuHienThi() {
		return _originalThuTuHienThi;
	}

	@Override
	public String getMaGiaPha() {
		if (_maGiaPha == null) {
			return "";
		}
		else {
			return _maGiaPha;
		}
	}

	@Override
	public void setMaGiaPha(String maGiaPha) {
		_maGiaPha = maGiaPha;
	}

	@Override
	public boolean getTrangThai() {
		return _trangThai;
	}

	@Override
	public boolean isTrangThai() {
		return _trangThai;
	}

	@Override
	public void setTrangThai(boolean trangThai) {
		_columnBitmask |= TRANGTHAI_COLUMN_BITMASK;

		if (!_setOriginalTrangThai) {
			_setOriginalTrangThai = true;

			_originalTrangThai = _trangThai;
		}

		_trangThai = trangThai;
	}

	public boolean getOriginalTrangThai() {
		return _originalTrangThai;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DanhMuc.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DanhMuc toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DanhMucImpl danhMucImpl = new DanhMucImpl();

		danhMucImpl.setId(getId());
		danhMucImpl.setNhomId(getNhomId());
		danhMucImpl.setMa(getMa());
		danhMucImpl.setTen(getTen());
		danhMucImpl.setMoTa(getMoTa());
		danhMucImpl.setMuc(getMuc());
		danhMucImpl.setChaId(getChaId());
		danhMucImpl.setThuTuHienThi(getThuTuHienThi());
		danhMucImpl.setMaGiaPha(getMaGiaPha());
		danhMucImpl.setTrangThai(isTrangThai());

		danhMucImpl.resetOriginalValues();

		return danhMucImpl;
	}

	@Override
	public int compareTo(DanhMuc danhMuc) {
		int value = 0;

		if (getThuTuHienThi() < danhMuc.getThuTuHienThi()) {
			value = -1;
		}
		else if (getThuTuHienThi() > danhMuc.getThuTuHienThi()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = getTen().compareTo(danhMuc.getTen());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DanhMuc)) {
			return false;
		}

		DanhMuc danhMuc = (DanhMuc)obj;

		long primaryKey = danhMuc.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DanhMucModelImpl danhMucModelImpl = this;

		danhMucModelImpl._originalId = danhMucModelImpl._id;

		danhMucModelImpl._setOriginalId = false;

		danhMucModelImpl._originalNhomId = danhMucModelImpl._nhomId;

		danhMucModelImpl._setOriginalNhomId = false;

		danhMucModelImpl._originalMa = danhMucModelImpl._ma;

		danhMucModelImpl._originalTen = danhMucModelImpl._ten;

		danhMucModelImpl._originalMuc = danhMucModelImpl._muc;

		danhMucModelImpl._setOriginalMuc = false;

		danhMucModelImpl._originalChaId = danhMucModelImpl._chaId;

		danhMucModelImpl._setOriginalChaId = false;

		danhMucModelImpl._originalThuTuHienThi = danhMucModelImpl._thuTuHienThi;

		danhMucModelImpl._setOriginalThuTuHienThi = false;

		danhMucModelImpl._originalTrangThai = danhMucModelImpl._trangThai;

		danhMucModelImpl._setOriginalTrangThai = false;

		danhMucModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DanhMuc> toCacheModel() {
		DanhMucCacheModel danhMucCacheModel = new DanhMucCacheModel();

		danhMucCacheModel.id = getId();

		danhMucCacheModel.nhomId = getNhomId();

		danhMucCacheModel.ma = getMa();

		String ma = danhMucCacheModel.ma;

		if ((ma != null) && (ma.length() == 0)) {
			danhMucCacheModel.ma = null;
		}

		danhMucCacheModel.ten = getTen();

		String ten = danhMucCacheModel.ten;

		if ((ten != null) && (ten.length() == 0)) {
			danhMucCacheModel.ten = null;
		}

		danhMucCacheModel.moTa = getMoTa();

		String moTa = danhMucCacheModel.moTa;

		if ((moTa != null) && (moTa.length() == 0)) {
			danhMucCacheModel.moTa = null;
		}

		danhMucCacheModel.muc = getMuc();

		danhMucCacheModel.chaId = getChaId();

		danhMucCacheModel.thuTuHienThi = getThuTuHienThi();

		danhMucCacheModel.maGiaPha = getMaGiaPha();

		String maGiaPha = danhMucCacheModel.maGiaPha;

		if ((maGiaPha != null) && (maGiaPha.length() == 0)) {
			danhMucCacheModel.maGiaPha = null;
		}

		danhMucCacheModel.trangThai = isTrangThai();

		return danhMucCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DanhMuc, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DanhMuc, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DanhMuc, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((DanhMuc)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DanhMuc, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DanhMuc, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DanhMuc, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DanhMuc)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, DanhMuc>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _id;
	private long _originalId;
	private boolean _setOriginalId;
	private long _nhomId;
	private long _originalNhomId;
	private boolean _setOriginalNhomId;
	private String _ma;
	private String _originalMa;
	private String _ten;
	private String _originalTen;
	private String _moTa;
	private int _muc;
	private int _originalMuc;
	private boolean _setOriginalMuc;
	private long _chaId;
	private long _originalChaId;
	private boolean _setOriginalChaId;
	private int _thuTuHienThi;
	private int _originalThuTuHienThi;
	private boolean _setOriginalThuTuHienThi;
	private String _maGiaPha;
	private boolean _trangThai;
	private boolean _originalTrangThai;
	private boolean _setOriginalTrangThai;
	private long _columnBitmask;
	private DanhMuc _escapedModel;

}