/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package dtt.vn.vnpost.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import dtt.vn.vnpost.model.Account;
import dtt.vn.vnpost.model.AccountModel;
import dtt.vn.vnpost.model.AccountSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Account service. Represents a row in the &quot;idm_Account&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>AccountModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AccountImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AccountImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AccountModelImpl
	extends BaseModelImpl<Account> implements AccountModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a account model instance should use the <code>Account</code> interface instead.
	 */
	public static final String TABLE_NAME = "idm_Account";

	public static final Object[][] TABLE_COLUMNS = {
		{"accountId", Types.BIGINT}, {"accountType", Types.INTEGER},
		{"accountName", Types.VARCHAR}, {"companyId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"fullName", Types.VARCHAR}, {"birthdate", Types.TIMESTAMP},
		{"email", Types.VARCHAR}, {"telNo", Types.VARCHAR},
		{"personalId", Types.VARCHAR}, {"address", Types.VARCHAR},
		{"gender", Types.INTEGER}, {"legalDelegate", Types.VARCHAR},
		{"taxCode", Types.VARCHAR}, {"insuranceCode", Types.VARCHAR},
		{"nationality", Types.VARCHAR}, {"ethnicGroup", Types.VARCHAR},
		{"familyRegNo", Types.VARCHAR}, {"maritalStatus", Types.INTEGER},
		{"workingPlace", Types.VARCHAR}, {"nativePlace", Types.VARCHAR},
		{"rangeDate", Types.TIMESTAMP}, {"issuedBy", Types.VARCHAR},
		{"fatherName", Types.VARCHAR}, {"motherName", Types.VARCHAR},
		{"guardianName", Types.VARCHAR}, {"spouseName", Types.VARCHAR},
		{"headHouseholdName", Types.VARCHAR}, {"nation", Types.VARCHAR},
		{"representativeNumber", Types.VARCHAR},
		{"representativeName", Types.VARCHAR},
		{"representativeTelNo", Types.VARCHAR}, {"fax", Types.VARCHAR},
		{"superiorOrganization", Types.VARCHAR}, {"note", Types.VARCHAR},
		{"idDBXM", Types.BIGINT}, {"cityCode", Types.VARCHAR},
		{"districtCode", Types.VARCHAR}, {"wardCode", Types.VARCHAR},
		{"cityCodeXM", Types.VARCHAR}, {"districtCodeXM", Types.VARCHAR},
		{"wardCodeXM", Types.VARCHAR}, {"addressXM", Types.VARCHAR},
		{"attachFile", Types.BIGINT}, {"accountStatus", Types.INTEGER},
		{"processStatus", Types.INTEGER}, {"signImageId", Types.BIGINT},
		{"hoSoId", Types.BIGINT}, {"message", Types.VARCHAR},
		{"assignUserId", Types.BIGINT}, {"ipLevel", Types.INTEGER},
		{"reOpen", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("accountId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("accountType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("accountName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fullName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("birthdate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("telNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personalId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gender", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("legalDelegate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("taxCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("insuranceCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nationality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ethnicGroup", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("familyRegNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maritalStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("workingPlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nativePlace", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rangeDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("issuedBy", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fatherName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("motherName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("guardianName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spouseName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("headHouseholdName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("representativeNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("representativeName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("representativeTelNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fax", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("superiorOrganization", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idDBXM", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cityCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("districtCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("wardCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cityCodeXM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("districtCodeXM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("wardCodeXM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressXM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("attachFile", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("accountStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("processStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("signImageId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("hoSoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("message", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("assignUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ipLevel", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("reOpen", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table idm_Account (accountId LONG not null primary key,accountType INTEGER,accountName VARCHAR(75) null,companyId LONG,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,fullName VARCHAR(75) null,birthdate DATE null,email VARCHAR(75) null,telNo VARCHAR(75) null,personalId VARCHAR(75) null,address VARCHAR(75) null,gender INTEGER,legalDelegate VARCHAR(75) null,taxCode VARCHAR(75) null,insuranceCode VARCHAR(75) null,nationality VARCHAR(75) null,ethnicGroup VARCHAR(75) null,familyRegNo VARCHAR(75) null,maritalStatus INTEGER,workingPlace VARCHAR(75) null,nativePlace VARCHAR(75) null,rangeDate DATE null,issuedBy VARCHAR(75) null,fatherName VARCHAR(75) null,motherName VARCHAR(75) null,guardianName VARCHAR(75) null,spouseName VARCHAR(75) null,headHouseholdName VARCHAR(75) null,nation VARCHAR(75) null,representativeNumber VARCHAR(75) null,representativeName VARCHAR(75) null,representativeTelNo VARCHAR(75) null,fax VARCHAR(75) null,superiorOrganization VARCHAR(75) null,note VARCHAR(75) null,idDBXM LONG,cityCode VARCHAR(75) null,districtCode VARCHAR(75) null,wardCode VARCHAR(75) null,cityCodeXM VARCHAR(75) null,districtCodeXM VARCHAR(75) null,wardCodeXM VARCHAR(75) null,addressXM VARCHAR(75) null,attachFile LONG,accountStatus INTEGER,processStatus INTEGER,signImageId LONG,hoSoId LONG,message VARCHAR(75) null,assignUserId LONG,ipLevel INTEGER,reOpen BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table idm_Account";

	public static final String ORDER_BY_JPQL =
		" ORDER BY account.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY idm_Account.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.dtt.vn.vnpost.model.Account"),
		false);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.dtt.vn.vnpost.model.Account"),
		false);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.dtt.vn.vnpost.model.Account"),
		true);

	public static final long ACCOUNTNAME_COLUMN_BITMASK = 1L;

	public static final long ACCOUNTSTATUS_COLUMN_BITMASK = 2L;

	public static final long ACCOUNTTYPE_COLUMN_BITMASK = 4L;

	public static final long CITYCODE_COLUMN_BITMASK = 8L;

	public static final long DISTRICTCODE_COLUMN_BITMASK = 16L;

	public static final long EMAIL_COLUMN_BITMASK = 32L;

	public static final long FULLNAME_COLUMN_BITMASK = 64L;

	public static final long GROUPID_COLUMN_BITMASK = 128L;

	public static final long HOSOID_COLUMN_BITMASK = 256L;

	public static final long PERSONALID_COLUMN_BITMASK = 512L;

	public static final long TAXCODE_COLUMN_BITMASK = 1024L;

	public static final long TELNO_COLUMN_BITMASK = 2048L;

	public static final long USERID_COLUMN_BITMASK = 4096L;

	public static final long WARDCODE_COLUMN_BITMASK = 8192L;

	public static final long CREATEDATE_COLUMN_BITMASK = 16384L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Account toModel(AccountSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Account model = new AccountImpl();

		model.setAccountId(soapModel.getAccountId());
		model.setAccountType(soapModel.getAccountType());
		model.setAccountName(soapModel.getAccountName());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setFullName(soapModel.getFullName());
		model.setBirthdate(soapModel.getBirthdate());
		model.setEmail(soapModel.getEmail());
		model.setTelNo(soapModel.getTelNo());
		model.setPersonalId(soapModel.getPersonalId());
		model.setAddress(soapModel.getAddress());
		model.setGender(soapModel.getGender());
		model.setLegalDelegate(soapModel.getLegalDelegate());
		model.setTaxCode(soapModel.getTaxCode());
		model.setInsuranceCode(soapModel.getInsuranceCode());
		model.setNationality(soapModel.getNationality());
		model.setEthnicGroup(soapModel.getEthnicGroup());
		model.setFamilyRegNo(soapModel.getFamilyRegNo());
		model.setMaritalStatus(soapModel.getMaritalStatus());
		model.setWorkingPlace(soapModel.getWorkingPlace());
		model.setNativePlace(soapModel.getNativePlace());
		model.setRangeDate(soapModel.getRangeDate());
		model.setIssuedBy(soapModel.getIssuedBy());
		model.setFatherName(soapModel.getFatherName());
		model.setMotherName(soapModel.getMotherName());
		model.setGuardianName(soapModel.getGuardianName());
		model.setSpouseName(soapModel.getSpouseName());
		model.setHeadHouseholdName(soapModel.getHeadHouseholdName());
		model.setNation(soapModel.getNation());
		model.setRepresentativeNumber(soapModel.getRepresentativeNumber());
		model.setRepresentativeName(soapModel.getRepresentativeName());
		model.setRepresentativeTelNo(soapModel.getRepresentativeTelNo());
		model.setFax(soapModel.getFax());
		model.setSuperiorOrganization(soapModel.getSuperiorOrganization());
		model.setNote(soapModel.getNote());
		model.setIdDBXM(soapModel.getIdDBXM());
		model.setCityCode(soapModel.getCityCode());
		model.setDistrictCode(soapModel.getDistrictCode());
		model.setWardCode(soapModel.getWardCode());
		model.setCityCodeXM(soapModel.getCityCodeXM());
		model.setDistrictCodeXM(soapModel.getDistrictCodeXM());
		model.setWardCodeXM(soapModel.getWardCodeXM());
		model.setAddressXM(soapModel.getAddressXM());
		model.setAttachFile(soapModel.getAttachFile());
		model.setAccountStatus(soapModel.getAccountStatus());
		model.setProcessStatus(soapModel.getProcessStatus());
		model.setSignImageId(soapModel.getSignImageId());
		model.setHoSoId(soapModel.getHoSoId());
		model.setMessage(soapModel.getMessage());
		model.setAssignUserId(soapModel.getAssignUserId());
		model.setIpLevel(soapModel.getIpLevel());
		model.setReOpen(soapModel.isReOpen());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Account> toModels(AccountSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Account> models = new ArrayList<Account>(soapModels.length);

		for (AccountSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		dtt.vn.vnpost.service.util.ServiceProps.get(
			"lock.expiration.time.dtt.vn.vnpost.model.Account"));

	public AccountModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _accountId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAccountId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _accountId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Account.class;
	}

	@Override
	public String getModelClassName() {
		return Account.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Account, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Account, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Account, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Account)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Account, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Account, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Account)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Account, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Account, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Account>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Account.class.getClassLoader(), Account.class, ModelWrapper.class);

		try {
			Constructor<Account> constructor =
				(Constructor<Account>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Account, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Account, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Account, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Account, Object>>();
		Map<String, BiConsumer<Account, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Account, ?>>();

		attributeGetterFunctions.put(
			"accountId",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getAccountId();
				}

			});
		attributeSetterBiConsumers.put(
			"accountId",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object accountId) {
					account.setAccountId((Long)accountId);
				}

			});
		attributeGetterFunctions.put(
			"accountType",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getAccountType();
				}

			});
		attributeSetterBiConsumers.put(
			"accountType",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object accountType) {
					account.setAccountType((Integer)accountType);
				}

			});
		attributeGetterFunctions.put(
			"accountName",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getAccountName();
				}

			});
		attributeSetterBiConsumers.put(
			"accountName",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object accountName) {
					account.setAccountName((String)accountName);
				}

			});
		attributeGetterFunctions.put(
			"companyId",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getCompanyId();
				}

			});
		attributeSetterBiConsumers.put(
			"companyId",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object companyId) {
					account.setCompanyId((Long)companyId);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object groupId) {
					account.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"userId",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"userId",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object userId) {
					account.setUserId((Long)userId);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object createDate) {
					account.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object modifiedDate) {
					account.setModifiedDate((Date)modifiedDate);
				}

			});
		attributeGetterFunctions.put(
			"fullName",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getFullName();
				}

			});
		attributeSetterBiConsumers.put(
			"fullName",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object fullName) {
					account.setFullName((String)fullName);
				}

			});
		attributeGetterFunctions.put(
			"birthdate",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getBirthdate();
				}

			});
		attributeSetterBiConsumers.put(
			"birthdate",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object birthdate) {
					account.setBirthdate((Date)birthdate);
				}

			});
		attributeGetterFunctions.put(
			"email",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getEmail();
				}

			});
		attributeSetterBiConsumers.put(
			"email",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object email) {
					account.setEmail((String)email);
				}

			});
		attributeGetterFunctions.put(
			"telNo",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getTelNo();
				}

			});
		attributeSetterBiConsumers.put(
			"telNo",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object telNo) {
					account.setTelNo((String)telNo);
				}

			});
		attributeGetterFunctions.put(
			"personalId",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getPersonalId();
				}

			});
		attributeSetterBiConsumers.put(
			"personalId",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object personalId) {
					account.setPersonalId((String)personalId);
				}

			});
		attributeGetterFunctions.put(
			"address",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getAddress();
				}

			});
		attributeSetterBiConsumers.put(
			"address",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object address) {
					account.setAddress((String)address);
				}

			});
		attributeGetterFunctions.put(
			"gender",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getGender();
				}

			});
		attributeSetterBiConsumers.put(
			"gender",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object gender) {
					account.setGender((Integer)gender);
				}

			});
		attributeGetterFunctions.put(
			"legalDelegate",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getLegalDelegate();
				}

			});
		attributeSetterBiConsumers.put(
			"legalDelegate",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object legalDelegate) {
					account.setLegalDelegate((String)legalDelegate);
				}

			});
		attributeGetterFunctions.put(
			"taxCode",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getTaxCode();
				}

			});
		attributeSetterBiConsumers.put(
			"taxCode",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object taxCode) {
					account.setTaxCode((String)taxCode);
				}

			});
		attributeGetterFunctions.put(
			"insuranceCode",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getInsuranceCode();
				}

			});
		attributeSetterBiConsumers.put(
			"insuranceCode",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object insuranceCode) {
					account.setInsuranceCode((String)insuranceCode);
				}

			});
		attributeGetterFunctions.put(
			"nationality",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getNationality();
				}

			});
		attributeSetterBiConsumers.put(
			"nationality",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object nationality) {
					account.setNationality((String)nationality);
				}

			});
		attributeGetterFunctions.put(
			"ethnicGroup",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getEthnicGroup();
				}

			});
		attributeSetterBiConsumers.put(
			"ethnicGroup",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object ethnicGroup) {
					account.setEthnicGroup((String)ethnicGroup);
				}

			});
		attributeGetterFunctions.put(
			"familyRegNo",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getFamilyRegNo();
				}

			});
		attributeSetterBiConsumers.put(
			"familyRegNo",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object familyRegNo) {
					account.setFamilyRegNo((String)familyRegNo);
				}

			});
		attributeGetterFunctions.put(
			"maritalStatus",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getMaritalStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"maritalStatus",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object maritalStatus) {
					account.setMaritalStatus((Integer)maritalStatus);
				}

			});
		attributeGetterFunctions.put(
			"workingPlace",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getWorkingPlace();
				}

			});
		attributeSetterBiConsumers.put(
			"workingPlace",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object workingPlace) {
					account.setWorkingPlace((String)workingPlace);
				}

			});
		attributeGetterFunctions.put(
			"nativePlace",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getNativePlace();
				}

			});
		attributeSetterBiConsumers.put(
			"nativePlace",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object nativePlace) {
					account.setNativePlace((String)nativePlace);
				}

			});
		attributeGetterFunctions.put(
			"rangeDate",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getRangeDate();
				}

			});
		attributeSetterBiConsumers.put(
			"rangeDate",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object rangeDate) {
					account.setRangeDate((Date)rangeDate);
				}

			});
		attributeGetterFunctions.put(
			"issuedBy",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getIssuedBy();
				}

			});
		attributeSetterBiConsumers.put(
			"issuedBy",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object issuedBy) {
					account.setIssuedBy((String)issuedBy);
				}

			});
		attributeGetterFunctions.put(
			"fatherName",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getFatherName();
				}

			});
		attributeSetterBiConsumers.put(
			"fatherName",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object fatherName) {
					account.setFatherName((String)fatherName);
				}

			});
		attributeGetterFunctions.put(
			"motherName",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getMotherName();
				}

			});
		attributeSetterBiConsumers.put(
			"motherName",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object motherName) {
					account.setMotherName((String)motherName);
				}

			});
		attributeGetterFunctions.put(
			"guardianName",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getGuardianName();
				}

			});
		attributeSetterBiConsumers.put(
			"guardianName",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object guardianName) {
					account.setGuardianName((String)guardianName);
				}

			});
		attributeGetterFunctions.put(
			"spouseName",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getSpouseName();
				}

			});
		attributeSetterBiConsumers.put(
			"spouseName",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object spouseName) {
					account.setSpouseName((String)spouseName);
				}

			});
		attributeGetterFunctions.put(
			"headHouseholdName",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getHeadHouseholdName();
				}

			});
		attributeSetterBiConsumers.put(
			"headHouseholdName",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object headHouseholdName) {
					account.setHeadHouseholdName((String)headHouseholdName);
				}

			});
		attributeGetterFunctions.put(
			"nation",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getNation();
				}

			});
		attributeSetterBiConsumers.put(
			"nation",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object nation) {
					account.setNation((String)nation);
				}

			});
		attributeGetterFunctions.put(
			"representativeNumber",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getRepresentativeNumber();
				}

			});
		attributeSetterBiConsumers.put(
			"representativeNumber",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(
					Account account, Object representativeNumber) {

					account.setRepresentativeNumber(
						(String)representativeNumber);
				}

			});
		attributeGetterFunctions.put(
			"representativeName",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getRepresentativeName();
				}

			});
		attributeSetterBiConsumers.put(
			"representativeName",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object representativeName) {
					account.setRepresentativeName((String)representativeName);
				}

			});
		attributeGetterFunctions.put(
			"representativeTelNo",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getRepresentativeTelNo();
				}

			});
		attributeSetterBiConsumers.put(
			"representativeTelNo",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(
					Account account, Object representativeTelNo) {

					account.setRepresentativeTelNo((String)representativeTelNo);
				}

			});
		attributeGetterFunctions.put(
			"fax",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getFax();
				}

			});
		attributeSetterBiConsumers.put(
			"fax",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object fax) {
					account.setFax((String)fax);
				}

			});
		attributeGetterFunctions.put(
			"superiorOrganization",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getSuperiorOrganization();
				}

			});
		attributeSetterBiConsumers.put(
			"superiorOrganization",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(
					Account account, Object superiorOrganization) {

					account.setSuperiorOrganization(
						(String)superiorOrganization);
				}

			});
		attributeGetterFunctions.put(
			"note",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getNote();
				}

			});
		attributeSetterBiConsumers.put(
			"note",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object note) {
					account.setNote((String)note);
				}

			});
		attributeGetterFunctions.put(
			"idDBXM",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getIdDBXM();
				}

			});
		attributeSetterBiConsumers.put(
			"idDBXM",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object idDBXM) {
					account.setIdDBXM((Long)idDBXM);
				}

			});
		attributeGetterFunctions.put(
			"cityCode",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getCityCode();
				}

			});
		attributeSetterBiConsumers.put(
			"cityCode",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object cityCode) {
					account.setCityCode((String)cityCode);
				}

			});
		attributeGetterFunctions.put(
			"districtCode",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getDistrictCode();
				}

			});
		attributeSetterBiConsumers.put(
			"districtCode",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object districtCode) {
					account.setDistrictCode((String)districtCode);
				}

			});
		attributeGetterFunctions.put(
			"wardCode",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getWardCode();
				}

			});
		attributeSetterBiConsumers.put(
			"wardCode",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object wardCode) {
					account.setWardCode((String)wardCode);
				}

			});
		attributeGetterFunctions.put(
			"cityCodeXM",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getCityCodeXM();
				}

			});
		attributeSetterBiConsumers.put(
			"cityCodeXM",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object cityCodeXM) {
					account.setCityCodeXM((String)cityCodeXM);
				}

			});
		attributeGetterFunctions.put(
			"districtCodeXM",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getDistrictCodeXM();
				}

			});
		attributeSetterBiConsumers.put(
			"districtCodeXM",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object districtCodeXM) {
					account.setDistrictCodeXM((String)districtCodeXM);
				}

			});
		attributeGetterFunctions.put(
			"wardCodeXM",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getWardCodeXM();
				}

			});
		attributeSetterBiConsumers.put(
			"wardCodeXM",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object wardCodeXM) {
					account.setWardCodeXM((String)wardCodeXM);
				}

			});
		attributeGetterFunctions.put(
			"addressXM",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getAddressXM();
				}

			});
		attributeSetterBiConsumers.put(
			"addressXM",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object addressXM) {
					account.setAddressXM((String)addressXM);
				}

			});
		attributeGetterFunctions.put(
			"attachFile",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getAttachFile();
				}

			});
		attributeSetterBiConsumers.put(
			"attachFile",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object attachFile) {
					account.setAttachFile((Long)attachFile);
				}

			});
		attributeGetterFunctions.put(
			"accountStatus",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getAccountStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"accountStatus",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object accountStatus) {
					account.setAccountStatus((Integer)accountStatus);
				}

			});
		attributeGetterFunctions.put(
			"processStatus",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getProcessStatus();
				}

			});
		attributeSetterBiConsumers.put(
			"processStatus",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object processStatus) {
					account.setProcessStatus((Integer)processStatus);
				}

			});
		attributeGetterFunctions.put(
			"signImageId",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getSignImageId();
				}

			});
		attributeSetterBiConsumers.put(
			"signImageId",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object signImageId) {
					account.setSignImageId((Long)signImageId);
				}

			});
		attributeGetterFunctions.put(
			"hoSoId",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getHoSoId();
				}

			});
		attributeSetterBiConsumers.put(
			"hoSoId",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object hoSoId) {
					account.setHoSoId((Long)hoSoId);
				}

			});
		attributeGetterFunctions.put(
			"message",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getMessage();
				}

			});
		attributeSetterBiConsumers.put(
			"message",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object message) {
					account.setMessage((String)message);
				}

			});
		attributeGetterFunctions.put(
			"assignUserId",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getAssignUserId();
				}

			});
		attributeSetterBiConsumers.put(
			"assignUserId",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object assignUserId) {
					account.setAssignUserId((Long)assignUserId);
				}

			});
		attributeGetterFunctions.put(
			"ipLevel",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getIpLevel();
				}

			});
		attributeSetterBiConsumers.put(
			"ipLevel",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object ipLevel) {
					account.setIpLevel((Integer)ipLevel);
				}

			});
		attributeGetterFunctions.put(
			"reOpen",
			new Function<Account, Object>() {

				@Override
				public Object apply(Account account) {
					return account.getReOpen();
				}

			});
		attributeSetterBiConsumers.put(
			"reOpen",
			new BiConsumer<Account, Object>() {

				@Override
				public void accept(Account account, Object reOpen) {
					account.setReOpen((Boolean)reOpen);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getAccountId() {
		return _accountId;
	}

	@Override
	public void setAccountId(long accountId) {
		_accountId = accountId;
	}

	@JSON
	@Override
	public int getAccountType() {
		return _accountType;
	}

	@Override
	public void setAccountType(int accountType) {
		_columnBitmask |= ACCOUNTTYPE_COLUMN_BITMASK;

		if (!_setOriginalAccountType) {
			_setOriginalAccountType = true;

			_originalAccountType = _accountType;
		}

		_accountType = accountType;
	}

	public int getOriginalAccountType() {
		return _originalAccountType;
	}

	@JSON
	@Override
	public String getAccountName() {
		if (_accountName == null) {
			return "";
		}
		else {
			return _accountName;
		}
	}

	@Override
	public void setAccountName(String accountName) {
		_columnBitmask |= ACCOUNTNAME_COLUMN_BITMASK;

		if (_originalAccountName == null) {
			_originalAccountName = _accountName;
		}

		_accountName = accountName;
	}

	public String getOriginalAccountName() {
		return GetterUtil.getString(_originalAccountName);
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFullName() {
		if (_fullName == null) {
			return "";
		}
		else {
			return _fullName;
		}
	}

	@Override
	public void setFullName(String fullName) {
		_columnBitmask |= FULLNAME_COLUMN_BITMASK;

		if (_originalFullName == null) {
			_originalFullName = _fullName;
		}

		_fullName = fullName;
	}

	public String getOriginalFullName() {
		return GetterUtil.getString(_originalFullName);
	}

	@JSON
	@Override
	public Date getBirthdate() {
		return _birthdate;
	}

	@Override
	public void setBirthdate(Date birthdate) {
		_birthdate = birthdate;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_columnBitmask |= EMAIL_COLUMN_BITMASK;

		if (_originalEmail == null) {
			_originalEmail = _email;
		}

		_email = email;
	}

	public String getOriginalEmail() {
		return GetterUtil.getString(_originalEmail);
	}

	@JSON
	@Override
	public String getTelNo() {
		if (_telNo == null) {
			return "";
		}
		else {
			return _telNo;
		}
	}

	@Override
	public void setTelNo(String telNo) {
		_columnBitmask |= TELNO_COLUMN_BITMASK;

		if (_originalTelNo == null) {
			_originalTelNo = _telNo;
		}

		_telNo = telNo;
	}

	public String getOriginalTelNo() {
		return GetterUtil.getString(_originalTelNo);
	}

	@JSON
	@Override
	public String getPersonalId() {
		if (_personalId == null) {
			return "";
		}
		else {
			return _personalId;
		}
	}

	@Override
	public void setPersonalId(String personalId) {
		_columnBitmask |= PERSONALID_COLUMN_BITMASK;

		if (_originalPersonalId == null) {
			_originalPersonalId = _personalId;
		}

		_personalId = personalId;
	}

	public String getOriginalPersonalId() {
		return GetterUtil.getString(_originalPersonalId);
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	@Override
	public int getGender() {
		return _gender;
	}

	@Override
	public void setGender(int gender) {
		_gender = gender;
	}

	@JSON
	@Override
	public String getLegalDelegate() {
		if (_legalDelegate == null) {
			return "";
		}
		else {
			return _legalDelegate;
		}
	}

	@Override
	public void setLegalDelegate(String legalDelegate) {
		_legalDelegate = legalDelegate;
	}

	@JSON
	@Override
	public String getTaxCode() {
		if (_taxCode == null) {
			return "";
		}
		else {
			return _taxCode;
		}
	}

	@Override
	public void setTaxCode(String taxCode) {
		_columnBitmask |= TAXCODE_COLUMN_BITMASK;

		if (_originalTaxCode == null) {
			_originalTaxCode = _taxCode;
		}

		_taxCode = taxCode;
	}

	public String getOriginalTaxCode() {
		return GetterUtil.getString(_originalTaxCode);
	}

	@JSON
	@Override
	public String getInsuranceCode() {
		if (_insuranceCode == null) {
			return "";
		}
		else {
			return _insuranceCode;
		}
	}

	@Override
	public void setInsuranceCode(String insuranceCode) {
		_insuranceCode = insuranceCode;
	}

	@JSON
	@Override
	public String getNationality() {
		if (_nationality == null) {
			return "";
		}
		else {
			return _nationality;
		}
	}

	@Override
	public void setNationality(String nationality) {
		_nationality = nationality;
	}

	@JSON
	@Override
	public String getEthnicGroup() {
		if (_ethnicGroup == null) {
			return "";
		}
		else {
			return _ethnicGroup;
		}
	}

	@Override
	public void setEthnicGroup(String ethnicGroup) {
		_ethnicGroup = ethnicGroup;
	}

	@JSON
	@Override
	public String getFamilyRegNo() {
		if (_familyRegNo == null) {
			return "";
		}
		else {
			return _familyRegNo;
		}
	}

	@Override
	public void setFamilyRegNo(String familyRegNo) {
		_familyRegNo = familyRegNo;
	}

	@JSON
	@Override
	public int getMaritalStatus() {
		return _maritalStatus;
	}

	@Override
	public void setMaritalStatus(int maritalStatus) {
		_maritalStatus = maritalStatus;
	}

	@JSON
	@Override
	public String getWorkingPlace() {
		if (_workingPlace == null) {
			return "";
		}
		else {
			return _workingPlace;
		}
	}

	@Override
	public void setWorkingPlace(String workingPlace) {
		_workingPlace = workingPlace;
	}

	@JSON
	@Override
	public String getNativePlace() {
		if (_nativePlace == null) {
			return "";
		}
		else {
			return _nativePlace;
		}
	}

	@Override
	public void setNativePlace(String nativePlace) {
		_nativePlace = nativePlace;
	}

	@JSON
	@Override
	public Date getRangeDate() {
		return _rangeDate;
	}

	@Override
	public void setRangeDate(Date rangeDate) {
		_rangeDate = rangeDate;
	}

	@JSON
	@Override
	public String getIssuedBy() {
		if (_issuedBy == null) {
			return "";
		}
		else {
			return _issuedBy;
		}
	}

	@Override
	public void setIssuedBy(String issuedBy) {
		_issuedBy = issuedBy;
	}

	@JSON
	@Override
	public String getFatherName() {
		if (_fatherName == null) {
			return "";
		}
		else {
			return _fatherName;
		}
	}

	@Override
	public void setFatherName(String fatherName) {
		_fatherName = fatherName;
	}

	@JSON
	@Override
	public String getMotherName() {
		if (_motherName == null) {
			return "";
		}
		else {
			return _motherName;
		}
	}

	@Override
	public void setMotherName(String motherName) {
		_motherName = motherName;
	}

	@JSON
	@Override
	public String getGuardianName() {
		if (_guardianName == null) {
			return "";
		}
		else {
			return _guardianName;
		}
	}

	@Override
	public void setGuardianName(String guardianName) {
		_guardianName = guardianName;
	}

	@JSON
	@Override
	public String getSpouseName() {
		if (_spouseName == null) {
			return "";
		}
		else {
			return _spouseName;
		}
	}

	@Override
	public void setSpouseName(String spouseName) {
		_spouseName = spouseName;
	}

	@JSON
	@Override
	public String getHeadHouseholdName() {
		if (_headHouseholdName == null) {
			return "";
		}
		else {
			return _headHouseholdName;
		}
	}

	@Override
	public void setHeadHouseholdName(String headHouseholdName) {
		_headHouseholdName = headHouseholdName;
	}

	@JSON
	@Override
	public String getNation() {
		if (_nation == null) {
			return "";
		}
		else {
			return _nation;
		}
	}

	@Override
	public void setNation(String nation) {
		_nation = nation;
	}

	@JSON
	@Override
	public String getRepresentativeNumber() {
		if (_representativeNumber == null) {
			return "";
		}
		else {
			return _representativeNumber;
		}
	}

	@Override
	public void setRepresentativeNumber(String representativeNumber) {
		_representativeNumber = representativeNumber;
	}

	@JSON
	@Override
	public String getRepresentativeName() {
		if (_representativeName == null) {
			return "";
		}
		else {
			return _representativeName;
		}
	}

	@Override
	public void setRepresentativeName(String representativeName) {
		_representativeName = representativeName;
	}

	@JSON
	@Override
	public String getRepresentativeTelNo() {
		if (_representativeTelNo == null) {
			return "";
		}
		else {
			return _representativeTelNo;
		}
	}

	@Override
	public void setRepresentativeTelNo(String representativeTelNo) {
		_representativeTelNo = representativeTelNo;
	}

	@JSON
	@Override
	public String getFax() {
		if (_fax == null) {
			return "";
		}
		else {
			return _fax;
		}
	}

	@Override
	public void setFax(String fax) {
		_fax = fax;
	}

	@JSON
	@Override
	public String getSuperiorOrganization() {
		if (_superiorOrganization == null) {
			return "";
		}
		else {
			return _superiorOrganization;
		}
	}

	@Override
	public void setSuperiorOrganization(String superiorOrganization) {
		_superiorOrganization = superiorOrganization;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return "";
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@JSON
	@Override
	public long getIdDBXM() {
		return _idDBXM;
	}

	@Override
	public void setIdDBXM(long idDBXM) {
		_idDBXM = idDBXM;
	}

	@JSON
	@Override
	public String getCityCode() {
		if (_cityCode == null) {
			return "";
		}
		else {
			return _cityCode;
		}
	}

	@Override
	public void setCityCode(String cityCode) {
		_columnBitmask |= CITYCODE_COLUMN_BITMASK;

		if (_originalCityCode == null) {
			_originalCityCode = _cityCode;
		}

		_cityCode = cityCode;
	}

	public String getOriginalCityCode() {
		return GetterUtil.getString(_originalCityCode);
	}

	@JSON
	@Override
	public String getDistrictCode() {
		if (_districtCode == null) {
			return "";
		}
		else {
			return _districtCode;
		}
	}

	@Override
	public void setDistrictCode(String districtCode) {
		_columnBitmask |= DISTRICTCODE_COLUMN_BITMASK;

		if (_originalDistrictCode == null) {
			_originalDistrictCode = _districtCode;
		}

		_districtCode = districtCode;
	}

	public String getOriginalDistrictCode() {
		return GetterUtil.getString(_originalDistrictCode);
	}

	@JSON
	@Override
	public String getWardCode() {
		if (_wardCode == null) {
			return "";
		}
		else {
			return _wardCode;
		}
	}

	@Override
	public void setWardCode(String wardCode) {
		_columnBitmask |= WARDCODE_COLUMN_BITMASK;

		if (_originalWardCode == null) {
			_originalWardCode = _wardCode;
		}

		_wardCode = wardCode;
	}

	public String getOriginalWardCode() {
		return GetterUtil.getString(_originalWardCode);
	}

	@JSON
	@Override
	public String getCityCodeXM() {
		if (_cityCodeXM == null) {
			return "";
		}
		else {
			return _cityCodeXM;
		}
	}

	@Override
	public void setCityCodeXM(String cityCodeXM) {
		_cityCodeXM = cityCodeXM;
	}

	@JSON
	@Override
	public String getDistrictCodeXM() {
		if (_districtCodeXM == null) {
			return "";
		}
		else {
			return _districtCodeXM;
		}
	}

	@Override
	public void setDistrictCodeXM(String districtCodeXM) {
		_districtCodeXM = districtCodeXM;
	}

	@JSON
	@Override
	public String getWardCodeXM() {
		if (_wardCodeXM == null) {
			return "";
		}
		else {
			return _wardCodeXM;
		}
	}

	@Override
	public void setWardCodeXM(String wardCodeXM) {
		_wardCodeXM = wardCodeXM;
	}

	@JSON
	@Override
	public String getAddressXM() {
		if (_addressXM == null) {
			return "";
		}
		else {
			return _addressXM;
		}
	}

	@Override
	public void setAddressXM(String addressXM) {
		_addressXM = addressXM;
	}

	@JSON
	@Override
	public long getAttachFile() {
		return _attachFile;
	}

	@Override
	public void setAttachFile(long attachFile) {
		_attachFile = attachFile;
	}

	@JSON
	@Override
	public int getAccountStatus() {
		return _accountStatus;
	}

	@Override
	public void setAccountStatus(int accountStatus) {
		_columnBitmask |= ACCOUNTSTATUS_COLUMN_BITMASK;

		if (!_setOriginalAccountStatus) {
			_setOriginalAccountStatus = true;

			_originalAccountStatus = _accountStatus;
		}

		_accountStatus = accountStatus;
	}

	public int getOriginalAccountStatus() {
		return _originalAccountStatus;
	}

	@JSON
	@Override
	public int getProcessStatus() {
		return _processStatus;
	}

	@Override
	public void setProcessStatus(int processStatus) {
		_processStatus = processStatus;
	}

	@JSON
	@Override
	public long getSignImageId() {
		return _signImageId;
	}

	@Override
	public void setSignImageId(long signImageId) {
		_signImageId = signImageId;
	}

	@JSON
	@Override
	public long getHoSoId() {
		return _hoSoId;
	}

	@Override
	public void setHoSoId(long hoSoId) {
		_columnBitmask |= HOSOID_COLUMN_BITMASK;

		if (!_setOriginalHoSoId) {
			_setOriginalHoSoId = true;

			_originalHoSoId = _hoSoId;
		}

		_hoSoId = hoSoId;
	}

	public long getOriginalHoSoId() {
		return _originalHoSoId;
	}

	@JSON
	@Override
	public String getMessage() {
		if (_message == null) {
			return "";
		}
		else {
			return _message;
		}
	}

	@Override
	public void setMessage(String message) {
		_message = message;
	}

	@JSON
	@Override
	public long getAssignUserId() {
		return _assignUserId;
	}

	@Override
	public void setAssignUserId(long assignUserId) {
		_assignUserId = assignUserId;
	}

	@Override
	public String getAssignUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getAssignUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setAssignUserUuid(String assignUserUuid) {
	}

	@JSON
	@Override
	public int getIpLevel() {
		return _ipLevel;
	}

	@Override
	public void setIpLevel(int ipLevel) {
		_ipLevel = ipLevel;
	}

	@JSON
	@Override
	public boolean getReOpen() {
		return _reOpen;
	}

	@JSON
	@Override
	public boolean isReOpen() {
		return _reOpen;
	}

	@Override
	public void setReOpen(boolean reOpen) {
		_reOpen = reOpen;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Account.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Account toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AccountImpl accountImpl = new AccountImpl();

		accountImpl.setAccountId(getAccountId());
		accountImpl.setAccountType(getAccountType());
		accountImpl.setAccountName(getAccountName());
		accountImpl.setCompanyId(getCompanyId());
		accountImpl.setGroupId(getGroupId());
		accountImpl.setUserId(getUserId());
		accountImpl.setCreateDate(getCreateDate());
		accountImpl.setModifiedDate(getModifiedDate());
		accountImpl.setFullName(getFullName());
		accountImpl.setBirthdate(getBirthdate());
		accountImpl.setEmail(getEmail());
		accountImpl.setTelNo(getTelNo());
		accountImpl.setPersonalId(getPersonalId());
		accountImpl.setAddress(getAddress());
		accountImpl.setGender(getGender());
		accountImpl.setLegalDelegate(getLegalDelegate());
		accountImpl.setTaxCode(getTaxCode());
		accountImpl.setInsuranceCode(getInsuranceCode());
		accountImpl.setNationality(getNationality());
		accountImpl.setEthnicGroup(getEthnicGroup());
		accountImpl.setFamilyRegNo(getFamilyRegNo());
		accountImpl.setMaritalStatus(getMaritalStatus());
		accountImpl.setWorkingPlace(getWorkingPlace());
		accountImpl.setNativePlace(getNativePlace());
		accountImpl.setRangeDate(getRangeDate());
		accountImpl.setIssuedBy(getIssuedBy());
		accountImpl.setFatherName(getFatherName());
		accountImpl.setMotherName(getMotherName());
		accountImpl.setGuardianName(getGuardianName());
		accountImpl.setSpouseName(getSpouseName());
		accountImpl.setHeadHouseholdName(getHeadHouseholdName());
		accountImpl.setNation(getNation());
		accountImpl.setRepresentativeNumber(getRepresentativeNumber());
		accountImpl.setRepresentativeName(getRepresentativeName());
		accountImpl.setRepresentativeTelNo(getRepresentativeTelNo());
		accountImpl.setFax(getFax());
		accountImpl.setSuperiorOrganization(getSuperiorOrganization());
		accountImpl.setNote(getNote());
		accountImpl.setIdDBXM(getIdDBXM());
		accountImpl.setCityCode(getCityCode());
		accountImpl.setDistrictCode(getDistrictCode());
		accountImpl.setWardCode(getWardCode());
		accountImpl.setCityCodeXM(getCityCodeXM());
		accountImpl.setDistrictCodeXM(getDistrictCodeXM());
		accountImpl.setWardCodeXM(getWardCodeXM());
		accountImpl.setAddressXM(getAddressXM());
		accountImpl.setAttachFile(getAttachFile());
		accountImpl.setAccountStatus(getAccountStatus());
		accountImpl.setProcessStatus(getProcessStatus());
		accountImpl.setSignImageId(getSignImageId());
		accountImpl.setHoSoId(getHoSoId());
		accountImpl.setMessage(getMessage());
		accountImpl.setAssignUserId(getAssignUserId());
		accountImpl.setIpLevel(getIpLevel());
		accountImpl.setReOpen(isReOpen());

		accountImpl.resetOriginalValues();

		return accountImpl;
	}

	@Override
	public int compareTo(Account account) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), account.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Account)) {
			return false;
		}

		Account account = (Account)obj;

		long primaryKey = account.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AccountModelImpl accountModelImpl = this;

		accountModelImpl._originalAccountType = accountModelImpl._accountType;

		accountModelImpl._setOriginalAccountType = false;

		accountModelImpl._originalAccountName = accountModelImpl._accountName;

		accountModelImpl._originalGroupId = accountModelImpl._groupId;

		accountModelImpl._setOriginalGroupId = false;

		accountModelImpl._originalUserId = accountModelImpl._userId;

		accountModelImpl._setOriginalUserId = false;

		accountModelImpl._setModifiedDate = false;

		accountModelImpl._originalFullName = accountModelImpl._fullName;

		accountModelImpl._originalEmail = accountModelImpl._email;

		accountModelImpl._originalTelNo = accountModelImpl._telNo;

		accountModelImpl._originalPersonalId = accountModelImpl._personalId;

		accountModelImpl._originalTaxCode = accountModelImpl._taxCode;

		accountModelImpl._originalCityCode = accountModelImpl._cityCode;

		accountModelImpl._originalDistrictCode = accountModelImpl._districtCode;

		accountModelImpl._originalWardCode = accountModelImpl._wardCode;

		accountModelImpl._originalAccountStatus =
			accountModelImpl._accountStatus;

		accountModelImpl._setOriginalAccountStatus = false;

		accountModelImpl._originalHoSoId = accountModelImpl._hoSoId;

		accountModelImpl._setOriginalHoSoId = false;

		accountModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Account> toCacheModel() {
		AccountCacheModel accountCacheModel = new AccountCacheModel();

		accountCacheModel.accountId = getAccountId();

		accountCacheModel.accountType = getAccountType();

		accountCacheModel.accountName = getAccountName();

		String accountName = accountCacheModel.accountName;

		if ((accountName != null) && (accountName.length() == 0)) {
			accountCacheModel.accountName = null;
		}

		accountCacheModel.companyId = getCompanyId();

		accountCacheModel.groupId = getGroupId();

		accountCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			accountCacheModel.createDate = createDate.getTime();
		}
		else {
			accountCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			accountCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			accountCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		accountCacheModel.fullName = getFullName();

		String fullName = accountCacheModel.fullName;

		if ((fullName != null) && (fullName.length() == 0)) {
			accountCacheModel.fullName = null;
		}

		Date birthdate = getBirthdate();

		if (birthdate != null) {
			accountCacheModel.birthdate = birthdate.getTime();
		}
		else {
			accountCacheModel.birthdate = Long.MIN_VALUE;
		}

		accountCacheModel.email = getEmail();

		String email = accountCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			accountCacheModel.email = null;
		}

		accountCacheModel.telNo = getTelNo();

		String telNo = accountCacheModel.telNo;

		if ((telNo != null) && (telNo.length() == 0)) {
			accountCacheModel.telNo = null;
		}

		accountCacheModel.personalId = getPersonalId();

		String personalId = accountCacheModel.personalId;

		if ((personalId != null) && (personalId.length() == 0)) {
			accountCacheModel.personalId = null;
		}

		accountCacheModel.address = getAddress();

		String address = accountCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			accountCacheModel.address = null;
		}

		accountCacheModel.gender = getGender();

		accountCacheModel.legalDelegate = getLegalDelegate();

		String legalDelegate = accountCacheModel.legalDelegate;

		if ((legalDelegate != null) && (legalDelegate.length() == 0)) {
			accountCacheModel.legalDelegate = null;
		}

		accountCacheModel.taxCode = getTaxCode();

		String taxCode = accountCacheModel.taxCode;

		if ((taxCode != null) && (taxCode.length() == 0)) {
			accountCacheModel.taxCode = null;
		}

		accountCacheModel.insuranceCode = getInsuranceCode();

		String insuranceCode = accountCacheModel.insuranceCode;

		if ((insuranceCode != null) && (insuranceCode.length() == 0)) {
			accountCacheModel.insuranceCode = null;
		}

		accountCacheModel.nationality = getNationality();

		String nationality = accountCacheModel.nationality;

		if ((nationality != null) && (nationality.length() == 0)) {
			accountCacheModel.nationality = null;
		}

		accountCacheModel.ethnicGroup = getEthnicGroup();

		String ethnicGroup = accountCacheModel.ethnicGroup;

		if ((ethnicGroup != null) && (ethnicGroup.length() == 0)) {
			accountCacheModel.ethnicGroup = null;
		}

		accountCacheModel.familyRegNo = getFamilyRegNo();

		String familyRegNo = accountCacheModel.familyRegNo;

		if ((familyRegNo != null) && (familyRegNo.length() == 0)) {
			accountCacheModel.familyRegNo = null;
		}

		accountCacheModel.maritalStatus = getMaritalStatus();

		accountCacheModel.workingPlace = getWorkingPlace();

		String workingPlace = accountCacheModel.workingPlace;

		if ((workingPlace != null) && (workingPlace.length() == 0)) {
			accountCacheModel.workingPlace = null;
		}

		accountCacheModel.nativePlace = getNativePlace();

		String nativePlace = accountCacheModel.nativePlace;

		if ((nativePlace != null) && (nativePlace.length() == 0)) {
			accountCacheModel.nativePlace = null;
		}

		Date rangeDate = getRangeDate();

		if (rangeDate != null) {
			accountCacheModel.rangeDate = rangeDate.getTime();
		}
		else {
			accountCacheModel.rangeDate = Long.MIN_VALUE;
		}

		accountCacheModel.issuedBy = getIssuedBy();

		String issuedBy = accountCacheModel.issuedBy;

		if ((issuedBy != null) && (issuedBy.length() == 0)) {
			accountCacheModel.issuedBy = null;
		}

		accountCacheModel.fatherName = getFatherName();

		String fatherName = accountCacheModel.fatherName;

		if ((fatherName != null) && (fatherName.length() == 0)) {
			accountCacheModel.fatherName = null;
		}

		accountCacheModel.motherName = getMotherName();

		String motherName = accountCacheModel.motherName;

		if ((motherName != null) && (motherName.length() == 0)) {
			accountCacheModel.motherName = null;
		}

		accountCacheModel.guardianName = getGuardianName();

		String guardianName = accountCacheModel.guardianName;

		if ((guardianName != null) && (guardianName.length() == 0)) {
			accountCacheModel.guardianName = null;
		}

		accountCacheModel.spouseName = getSpouseName();

		String spouseName = accountCacheModel.spouseName;

		if ((spouseName != null) && (spouseName.length() == 0)) {
			accountCacheModel.spouseName = null;
		}

		accountCacheModel.headHouseholdName = getHeadHouseholdName();

		String headHouseholdName = accountCacheModel.headHouseholdName;

		if ((headHouseholdName != null) && (headHouseholdName.length() == 0)) {
			accountCacheModel.headHouseholdName = null;
		}

		accountCacheModel.nation = getNation();

		String nation = accountCacheModel.nation;

		if ((nation != null) && (nation.length() == 0)) {
			accountCacheModel.nation = null;
		}

		accountCacheModel.representativeNumber = getRepresentativeNumber();

		String representativeNumber = accountCacheModel.representativeNumber;

		if ((representativeNumber != null) &&
			(representativeNumber.length() == 0)) {

			accountCacheModel.representativeNumber = null;
		}

		accountCacheModel.representativeName = getRepresentativeName();

		String representativeName = accountCacheModel.representativeName;

		if ((representativeName != null) &&
			(representativeName.length() == 0)) {

			accountCacheModel.representativeName = null;
		}

		accountCacheModel.representativeTelNo = getRepresentativeTelNo();

		String representativeTelNo = accountCacheModel.representativeTelNo;

		if ((representativeTelNo != null) &&
			(representativeTelNo.length() == 0)) {

			accountCacheModel.representativeTelNo = null;
		}

		accountCacheModel.fax = getFax();

		String fax = accountCacheModel.fax;

		if ((fax != null) && (fax.length() == 0)) {
			accountCacheModel.fax = null;
		}

		accountCacheModel.superiorOrganization = getSuperiorOrganization();

		String superiorOrganization = accountCacheModel.superiorOrganization;

		if ((superiorOrganization != null) &&
			(superiorOrganization.length() == 0)) {

			accountCacheModel.superiorOrganization = null;
		}

		accountCacheModel.note = getNote();

		String note = accountCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			accountCacheModel.note = null;
		}

		accountCacheModel.idDBXM = getIdDBXM();

		accountCacheModel.cityCode = getCityCode();

		String cityCode = accountCacheModel.cityCode;

		if ((cityCode != null) && (cityCode.length() == 0)) {
			accountCacheModel.cityCode = null;
		}

		accountCacheModel.districtCode = getDistrictCode();

		String districtCode = accountCacheModel.districtCode;

		if ((districtCode != null) && (districtCode.length() == 0)) {
			accountCacheModel.districtCode = null;
		}

		accountCacheModel.wardCode = getWardCode();

		String wardCode = accountCacheModel.wardCode;

		if ((wardCode != null) && (wardCode.length() == 0)) {
			accountCacheModel.wardCode = null;
		}

		accountCacheModel.cityCodeXM = getCityCodeXM();

		String cityCodeXM = accountCacheModel.cityCodeXM;

		if ((cityCodeXM != null) && (cityCodeXM.length() == 0)) {
			accountCacheModel.cityCodeXM = null;
		}

		accountCacheModel.districtCodeXM = getDistrictCodeXM();

		String districtCodeXM = accountCacheModel.districtCodeXM;

		if ((districtCodeXM != null) && (districtCodeXM.length() == 0)) {
			accountCacheModel.districtCodeXM = null;
		}

		accountCacheModel.wardCodeXM = getWardCodeXM();

		String wardCodeXM = accountCacheModel.wardCodeXM;

		if ((wardCodeXM != null) && (wardCodeXM.length() == 0)) {
			accountCacheModel.wardCodeXM = null;
		}

		accountCacheModel.addressXM = getAddressXM();

		String addressXM = accountCacheModel.addressXM;

		if ((addressXM != null) && (addressXM.length() == 0)) {
			accountCacheModel.addressXM = null;
		}

		accountCacheModel.attachFile = getAttachFile();

		accountCacheModel.accountStatus = getAccountStatus();

		accountCacheModel.processStatus = getProcessStatus();

		accountCacheModel.signImageId = getSignImageId();

		accountCacheModel.hoSoId = getHoSoId();

		accountCacheModel.message = getMessage();

		String message = accountCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			accountCacheModel.message = null;
		}

		accountCacheModel.assignUserId = getAssignUserId();

		accountCacheModel.ipLevel = getIpLevel();

		accountCacheModel.reOpen = isReOpen();

		return accountCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Account, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Account, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Account, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Account)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Account, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Account, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Account, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Account)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, Account>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _accountId;
	private int _accountType;
	private int _originalAccountType;
	private boolean _setOriginalAccountType;
	private String _accountName;
	private String _originalAccountName;
	private long _companyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _fullName;
	private String _originalFullName;
	private Date _birthdate;
	private String _email;
	private String _originalEmail;
	private String _telNo;
	private String _originalTelNo;
	private String _personalId;
	private String _originalPersonalId;
	private String _address;
	private int _gender;
	private String _legalDelegate;
	private String _taxCode;
	private String _originalTaxCode;
	private String _insuranceCode;
	private String _nationality;
	private String _ethnicGroup;
	private String _familyRegNo;
	private int _maritalStatus;
	private String _workingPlace;
	private String _nativePlace;
	private Date _rangeDate;
	private String _issuedBy;
	private String _fatherName;
	private String _motherName;
	private String _guardianName;
	private String _spouseName;
	private String _headHouseholdName;
	private String _nation;
	private String _representativeNumber;
	private String _representativeName;
	private String _representativeTelNo;
	private String _fax;
	private String _superiorOrganization;
	private String _note;
	private long _idDBXM;
	private String _cityCode;
	private String _originalCityCode;
	private String _districtCode;
	private String _originalDistrictCode;
	private String _wardCode;
	private String _originalWardCode;
	private String _cityCodeXM;
	private String _districtCodeXM;
	private String _wardCodeXM;
	private String _addressXM;
	private long _attachFile;
	private int _accountStatus;
	private int _originalAccountStatus;
	private boolean _setOriginalAccountStatus;
	private int _processStatus;
	private long _signImageId;
	private long _hoSoId;
	private long _originalHoSoId;
	private boolean _setOriginalHoSoId;
	private String _message;
	private long _assignUserId;
	private int _ipLevel;
	private boolean _reOpen;
	private long _columnBitmask;
	private Account _escapedModel;

}