/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package dtt.vn.user.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import dtt.vn.user.service.model.ThongTinCanBo;
import dtt.vn.user.service.model.ThongTinCanBoModel;
import dtt.vn.user.service.model.ThongTinCanBoSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ThongTinCanBo service. Represents a row in the &quot;ttnd_thongtincanbo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ThongTinCanBoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ThongTinCanBoImpl}.
 * </p>
 *
 * @author nhanvienDTT
 * @see ThongTinCanBoImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ThongTinCanBoModelImpl
	extends BaseModelImpl<ThongTinCanBo> implements ThongTinCanBoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a thong tin can bo model instance should use the <code>ThongTinCanBo</code> interface instead.
	 */
	public static final String TABLE_NAME = "ttnd_thongtincanbo";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"email_address", Types.VARCHAR},
		{"username", Types.VARCHAR}, {"namerole", Types.VARCHAR},
		{"noidung", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("email_address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("username", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("namerole", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("noidung", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ttnd_thongtincanbo (id LONG not null primary key,email_address VARCHAR(75) null,username VARCHAR(75) null,namerole VARCHAR(75) null,noidung VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table ttnd_thongtincanbo";

	public static final String ORDER_BY_JPQL = " ORDER BY thongTinCanBo.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ttnd_thongtincanbo.id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		dtt.vn.user.service.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.dtt.vn.user.service.model.ThongTinCanBo"),
		false);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		dtt.vn.user.service.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.dtt.vn.user.service.model.ThongTinCanBo"),
		false);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		dtt.vn.user.service.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.dtt.vn.user.service.model.ThongTinCanBo"),
		true);

	public static final long EMAILADDRESS_COLUMN_BITMASK = 1L;

	public static final long NAMEROLE_COLUMN_BITMASK = 2L;

	public static final long USERNAME_COLUMN_BITMASK = 4L;

	public static final long ID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ThongTinCanBo toModel(ThongTinCanBoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ThongTinCanBo model = new ThongTinCanBoImpl();

		model.setId(soapModel.getId());
		model.setEmailAddress(soapModel.getEmailAddress());
		model.setUserName(soapModel.getUserName());
		model.setNameRole(soapModel.getNameRole());
		model.setNoiDung(soapModel.getNoiDung());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ThongTinCanBo> toModels(ThongTinCanBoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ThongTinCanBo> models = new ArrayList<ThongTinCanBo>(
			soapModels.length);

		for (ThongTinCanBoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		dtt.vn.user.service.service.util.ServiceProps.get(
			"lock.expiration.time.dtt.vn.user.service.model.ThongTinCanBo"));

	public ThongTinCanBoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ThongTinCanBo.class;
	}

	@Override
	public String getModelClassName() {
		return ThongTinCanBo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ThongTinCanBo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ThongTinCanBo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ThongTinCanBo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ThongTinCanBo)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ThongTinCanBo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ThongTinCanBo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ThongTinCanBo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ThongTinCanBo, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ThongTinCanBo, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ThongTinCanBo>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ThongTinCanBo.class.getClassLoader(), ThongTinCanBo.class,
			ModelWrapper.class);

		try {
			Constructor<ThongTinCanBo> constructor =
				(Constructor<ThongTinCanBo>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<ThongTinCanBo, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ThongTinCanBo, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ThongTinCanBo, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ThongTinCanBo, Object>>();
		Map<String, BiConsumer<ThongTinCanBo, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ThongTinCanBo, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<ThongTinCanBo, Object>() {

				@Override
				public Object apply(ThongTinCanBo thongTinCanBo) {
					return thongTinCanBo.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<ThongTinCanBo, Object>() {

				@Override
				public void accept(ThongTinCanBo thongTinCanBo, Object id) {
					thongTinCanBo.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"emailAddress",
			new Function<ThongTinCanBo, Object>() {

				@Override
				public Object apply(ThongTinCanBo thongTinCanBo) {
					return thongTinCanBo.getEmailAddress();
				}

			});
		attributeSetterBiConsumers.put(
			"emailAddress",
			new BiConsumer<ThongTinCanBo, Object>() {

				@Override
				public void accept(
					ThongTinCanBo thongTinCanBo, Object emailAddress) {

					thongTinCanBo.setEmailAddress((String)emailAddress);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<ThongTinCanBo, Object>() {

				@Override
				public Object apply(ThongTinCanBo thongTinCanBo) {
					return thongTinCanBo.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<ThongTinCanBo, Object>() {

				@Override
				public void accept(
					ThongTinCanBo thongTinCanBo, Object userName) {

					thongTinCanBo.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"nameRole",
			new Function<ThongTinCanBo, Object>() {

				@Override
				public Object apply(ThongTinCanBo thongTinCanBo) {
					return thongTinCanBo.getNameRole();
				}

			});
		attributeSetterBiConsumers.put(
			"nameRole",
			new BiConsumer<ThongTinCanBo, Object>() {

				@Override
				public void accept(
					ThongTinCanBo thongTinCanBo, Object nameRole) {

					thongTinCanBo.setNameRole((String)nameRole);
				}

			});
		attributeGetterFunctions.put(
			"noiDung",
			new Function<ThongTinCanBo, Object>() {

				@Override
				public Object apply(ThongTinCanBo thongTinCanBo) {
					return thongTinCanBo.getNoiDung();
				}

			});
		attributeSetterBiConsumers.put(
			"noiDung",
			new BiConsumer<ThongTinCanBo, Object>() {

				@Override
				public void accept(
					ThongTinCanBo thongTinCanBo, Object noiDung) {

					thongTinCanBo.setNoiDung((String)noiDung);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_columnBitmask |= EMAILADDRESS_COLUMN_BITMASK;

		if (_originalEmailAddress == null) {
			_originalEmailAddress = _emailAddress;
		}

		_emailAddress = emailAddress;
	}

	public String getOriginalEmailAddress() {
		return GetterUtil.getString(_originalEmailAddress);
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_columnBitmask |= USERNAME_COLUMN_BITMASK;

		if (_originalUserName == null) {
			_originalUserName = _userName;
		}

		_userName = userName;
	}

	public String getOriginalUserName() {
		return GetterUtil.getString(_originalUserName);
	}

	@JSON
	@Override
	public String getNameRole() {
		if (_nameRole == null) {
			return "";
		}
		else {
			return _nameRole;
		}
	}

	@Override
	public void setNameRole(String nameRole) {
		_columnBitmask |= NAMEROLE_COLUMN_BITMASK;

		if (_originalNameRole == null) {
			_originalNameRole = _nameRole;
		}

		_nameRole = nameRole;
	}

	public String getOriginalNameRole() {
		return GetterUtil.getString(_originalNameRole);
	}

	@JSON
	@Override
	public String getNoiDung() {
		if (_noiDung == null) {
			return "";
		}
		else {
			return _noiDung;
		}
	}

	@Override
	public void setNoiDung(String noiDung) {
		_noiDung = noiDung;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ThongTinCanBo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ThongTinCanBo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ThongTinCanBoImpl thongTinCanBoImpl = new ThongTinCanBoImpl();

		thongTinCanBoImpl.setId(getId());
		thongTinCanBoImpl.setEmailAddress(getEmailAddress());
		thongTinCanBoImpl.setUserName(getUserName());
		thongTinCanBoImpl.setNameRole(getNameRole());
		thongTinCanBoImpl.setNoiDung(getNoiDung());

		thongTinCanBoImpl.resetOriginalValues();

		return thongTinCanBoImpl;
	}

	@Override
	public int compareTo(ThongTinCanBo thongTinCanBo) {
		long primaryKey = thongTinCanBo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ThongTinCanBo)) {
			return false;
		}

		ThongTinCanBo thongTinCanBo = (ThongTinCanBo)obj;

		long primaryKey = thongTinCanBo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ThongTinCanBoModelImpl thongTinCanBoModelImpl = this;

		thongTinCanBoModelImpl._originalEmailAddress =
			thongTinCanBoModelImpl._emailAddress;

		thongTinCanBoModelImpl._originalUserName =
			thongTinCanBoModelImpl._userName;

		thongTinCanBoModelImpl._originalNameRole =
			thongTinCanBoModelImpl._nameRole;

		thongTinCanBoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ThongTinCanBo> toCacheModel() {
		ThongTinCanBoCacheModel thongTinCanBoCacheModel =
			new ThongTinCanBoCacheModel();

		thongTinCanBoCacheModel.id = getId();

		thongTinCanBoCacheModel.emailAddress = getEmailAddress();

		String emailAddress = thongTinCanBoCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			thongTinCanBoCacheModel.emailAddress = null;
		}

		thongTinCanBoCacheModel.userName = getUserName();

		String userName = thongTinCanBoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			thongTinCanBoCacheModel.userName = null;
		}

		thongTinCanBoCacheModel.nameRole = getNameRole();

		String nameRole = thongTinCanBoCacheModel.nameRole;

		if ((nameRole != null) && (nameRole.length() == 0)) {
			thongTinCanBoCacheModel.nameRole = null;
		}

		thongTinCanBoCacheModel.noiDung = getNoiDung();

		String noiDung = thongTinCanBoCacheModel.noiDung;

		if ((noiDung != null) && (noiDung.length() == 0)) {
			thongTinCanBoCacheModel.noiDung = null;
		}

		return thongTinCanBoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ThongTinCanBo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ThongTinCanBo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ThongTinCanBo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ThongTinCanBo)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ThongTinCanBo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ThongTinCanBo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ThongTinCanBo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ThongTinCanBo)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, ThongTinCanBo>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _id;
	private String _emailAddress;
	private String _originalEmailAddress;
	private String _userName;
	private String _originalUserName;
	private String _nameRole;
	private String _originalNameRole;
	private String _noiDung;
	private long _columnBitmask;
	private ThongTinCanBo _escapedModel;

}