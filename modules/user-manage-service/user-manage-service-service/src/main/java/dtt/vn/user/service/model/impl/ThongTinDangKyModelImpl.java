/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package dtt.vn.user.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import dtt.vn.user.service.model.ThongTinDangKy;
import dtt.vn.user.service.model.ThongTinDangKyModel;
import dtt.vn.user.service.model.ThongTinDangKySoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ThongTinDangKy service. Represents a row in the &quot;ttnd_thongtindangky&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ThongTinDangKyModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ThongTinDangKyImpl}.
 * </p>
 *
 * @author nhanvienDTT
 * @see ThongTinDangKyImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ThongTinDangKyModelImpl
	extends BaseModelImpl<ThongTinDangKy> implements ThongTinDangKyModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a thong tin dang ky model instance should use the <code>ThongTinDangKy</code> interface instead.
	 */
	public static final String TABLE_NAME = "ttnd_thongtindangky";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"email_address", Types.VARCHAR},
		{"username", Types.VARCHAR}, {"sogiayto", Types.VARCHAR},
		{"makichhoat", Types.VARCHAR}, {"activetype", Types.VARCHAR},
		{"doituongsudung_id", Types.INTEGER}, {"noidung", Types.VARCHAR},
		{"ngaytao", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("email_address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("username", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sogiayto", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("makichhoat", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("activetype", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("doituongsudung_id", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("noidung", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ngaytao", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ttnd_thongtindangky (id LONG not null primary key,email_address VARCHAR(75) null,username VARCHAR(75) null,sogiayto VARCHAR(75) null,makichhoat VARCHAR(75) null,activetype VARCHAR(75) null,doituongsudung_id INTEGER,noidung VARCHAR(75) null,ngaytao DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table ttnd_thongtindangky";

	public static final String ORDER_BY_JPQL =
		" ORDER BY thongTinDangKy.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ttnd_thongtindangky.id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		dtt.vn.user.service.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.dtt.vn.user.service.model.ThongTinDangKy"),
		false);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		dtt.vn.user.service.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.dtt.vn.user.service.model.ThongTinDangKy"),
		false);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		dtt.vn.user.service.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.dtt.vn.user.service.model.ThongTinDangKy"),
		true);

	public static final long ACTIVETYPE_COLUMN_BITMASK = 1L;

	public static final long EMAILADDRESS_COLUMN_BITMASK = 2L;

	public static final long MAKICHHOAT_COLUMN_BITMASK = 4L;

	public static final long SOGIAYTO_COLUMN_BITMASK = 8L;

	public static final long USERNAME_COLUMN_BITMASK = 16L;

	public static final long ID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ThongTinDangKy toModel(ThongTinDangKySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ThongTinDangKy model = new ThongTinDangKyImpl();

		model.setId(soapModel.getId());
		model.setEmailAddress(soapModel.getEmailAddress());
		model.setUserName(soapModel.getUserName());
		model.setSoGiayTo(soapModel.getSoGiayTo());
		model.setMaKichHoat(soapModel.getMaKichHoat());
		model.setActiveType(soapModel.getActiveType());
		model.setDoiTuongSuDungId(soapModel.getDoiTuongSuDungId());
		model.setNoiDung(soapModel.getNoiDung());
		model.setNgayTao(soapModel.getNgayTao());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ThongTinDangKy> toModels(
		ThongTinDangKySoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<ThongTinDangKy> models = new ArrayList<ThongTinDangKy>(
			soapModels.length);

		for (ThongTinDangKySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		dtt.vn.user.service.service.util.ServiceProps.get(
			"lock.expiration.time.dtt.vn.user.service.model.ThongTinDangKy"));

	public ThongTinDangKyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ThongTinDangKy.class;
	}

	@Override
	public String getModelClassName() {
		return ThongTinDangKy.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ThongTinDangKy, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ThongTinDangKy, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ThongTinDangKy, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ThongTinDangKy)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ThongTinDangKy, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ThongTinDangKy, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ThongTinDangKy)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ThongTinDangKy, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ThongTinDangKy, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ThongTinDangKy>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ThongTinDangKy.class.getClassLoader(), ThongTinDangKy.class,
			ModelWrapper.class);

		try {
			Constructor<ThongTinDangKy> constructor =
				(Constructor<ThongTinDangKy>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<ThongTinDangKy, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ThongTinDangKy, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ThongTinDangKy, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ThongTinDangKy, Object>>();
		Map<String, BiConsumer<ThongTinDangKy, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ThongTinDangKy, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<ThongTinDangKy, Object>() {

				@Override
				public Object apply(ThongTinDangKy thongTinDangKy) {
					return thongTinDangKy.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<ThongTinDangKy, Object>() {

				@Override
				public void accept(ThongTinDangKy thongTinDangKy, Object id) {
					thongTinDangKy.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"emailAddress",
			new Function<ThongTinDangKy, Object>() {

				@Override
				public Object apply(ThongTinDangKy thongTinDangKy) {
					return thongTinDangKy.getEmailAddress();
				}

			});
		attributeSetterBiConsumers.put(
			"emailAddress",
			new BiConsumer<ThongTinDangKy, Object>() {

				@Override
				public void accept(
					ThongTinDangKy thongTinDangKy, Object emailAddress) {

					thongTinDangKy.setEmailAddress((String)emailAddress);
				}

			});
		attributeGetterFunctions.put(
			"userName",
			new Function<ThongTinDangKy, Object>() {

				@Override
				public Object apply(ThongTinDangKy thongTinDangKy) {
					return thongTinDangKy.getUserName();
				}

			});
		attributeSetterBiConsumers.put(
			"userName",
			new BiConsumer<ThongTinDangKy, Object>() {

				@Override
				public void accept(
					ThongTinDangKy thongTinDangKy, Object userName) {

					thongTinDangKy.setUserName((String)userName);
				}

			});
		attributeGetterFunctions.put(
			"soGiayTo",
			new Function<ThongTinDangKy, Object>() {

				@Override
				public Object apply(ThongTinDangKy thongTinDangKy) {
					return thongTinDangKy.getSoGiayTo();
				}

			});
		attributeSetterBiConsumers.put(
			"soGiayTo",
			new BiConsumer<ThongTinDangKy, Object>() {

				@Override
				public void accept(
					ThongTinDangKy thongTinDangKy, Object soGiayTo) {

					thongTinDangKy.setSoGiayTo((String)soGiayTo);
				}

			});
		attributeGetterFunctions.put(
			"maKichHoat",
			new Function<ThongTinDangKy, Object>() {

				@Override
				public Object apply(ThongTinDangKy thongTinDangKy) {
					return thongTinDangKy.getMaKichHoat();
				}

			});
		attributeSetterBiConsumers.put(
			"maKichHoat",
			new BiConsumer<ThongTinDangKy, Object>() {

				@Override
				public void accept(
					ThongTinDangKy thongTinDangKy, Object maKichHoat) {

					thongTinDangKy.setMaKichHoat((String)maKichHoat);
				}

			});
		attributeGetterFunctions.put(
			"activeType",
			new Function<ThongTinDangKy, Object>() {

				@Override
				public Object apply(ThongTinDangKy thongTinDangKy) {
					return thongTinDangKy.getActiveType();
				}

			});
		attributeSetterBiConsumers.put(
			"activeType",
			new BiConsumer<ThongTinDangKy, Object>() {

				@Override
				public void accept(
					ThongTinDangKy thongTinDangKy, Object activeType) {

					thongTinDangKy.setActiveType((String)activeType);
				}

			});
		attributeGetterFunctions.put(
			"doiTuongSuDungId",
			new Function<ThongTinDangKy, Object>() {

				@Override
				public Object apply(ThongTinDangKy thongTinDangKy) {
					return thongTinDangKy.getDoiTuongSuDungId();
				}

			});
		attributeSetterBiConsumers.put(
			"doiTuongSuDungId",
			new BiConsumer<ThongTinDangKy, Object>() {

				@Override
				public void accept(
					ThongTinDangKy thongTinDangKy, Object doiTuongSuDungId) {

					thongTinDangKy.setDoiTuongSuDungId(
						(Integer)doiTuongSuDungId);
				}

			});
		attributeGetterFunctions.put(
			"noiDung",
			new Function<ThongTinDangKy, Object>() {

				@Override
				public Object apply(ThongTinDangKy thongTinDangKy) {
					return thongTinDangKy.getNoiDung();
				}

			});
		attributeSetterBiConsumers.put(
			"noiDung",
			new BiConsumer<ThongTinDangKy, Object>() {

				@Override
				public void accept(
					ThongTinDangKy thongTinDangKy, Object noiDung) {

					thongTinDangKy.setNoiDung((String)noiDung);
				}

			});
		attributeGetterFunctions.put(
			"ngayTao",
			new Function<ThongTinDangKy, Object>() {

				@Override
				public Object apply(ThongTinDangKy thongTinDangKy) {
					return thongTinDangKy.getNgayTao();
				}

			});
		attributeSetterBiConsumers.put(
			"ngayTao",
			new BiConsumer<ThongTinDangKy, Object>() {

				@Override
				public void accept(
					ThongTinDangKy thongTinDangKy, Object ngayTao) {

					thongTinDangKy.setNgayTao((Date)ngayTao);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_columnBitmask |= EMAILADDRESS_COLUMN_BITMASK;

		if (_originalEmailAddress == null) {
			_originalEmailAddress = _emailAddress;
		}

		_emailAddress = emailAddress;
	}

	public String getOriginalEmailAddress() {
		return GetterUtil.getString(_originalEmailAddress);
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_columnBitmask |= USERNAME_COLUMN_BITMASK;

		if (_originalUserName == null) {
			_originalUserName = _userName;
		}

		_userName = userName;
	}

	public String getOriginalUserName() {
		return GetterUtil.getString(_originalUserName);
	}

	@JSON
	@Override
	public String getSoGiayTo() {
		if (_soGiayTo == null) {
			return "";
		}
		else {
			return _soGiayTo;
		}
	}

	@Override
	public void setSoGiayTo(String soGiayTo) {
		_columnBitmask |= SOGIAYTO_COLUMN_BITMASK;

		if (_originalSoGiayTo == null) {
			_originalSoGiayTo = _soGiayTo;
		}

		_soGiayTo = soGiayTo;
	}

	public String getOriginalSoGiayTo() {
		return GetterUtil.getString(_originalSoGiayTo);
	}

	@JSON
	@Override
	public String getMaKichHoat() {
		if (_maKichHoat == null) {
			return "";
		}
		else {
			return _maKichHoat;
		}
	}

	@Override
	public void setMaKichHoat(String maKichHoat) {
		_columnBitmask |= MAKICHHOAT_COLUMN_BITMASK;

		if (_originalMaKichHoat == null) {
			_originalMaKichHoat = _maKichHoat;
		}

		_maKichHoat = maKichHoat;
	}

	public String getOriginalMaKichHoat() {
		return GetterUtil.getString(_originalMaKichHoat);
	}

	@JSON
	@Override
	public String getActiveType() {
		if (_activeType == null) {
			return "";
		}
		else {
			return _activeType;
		}
	}

	@Override
	public void setActiveType(String activeType) {
		_columnBitmask |= ACTIVETYPE_COLUMN_BITMASK;

		if (_originalActiveType == null) {
			_originalActiveType = _activeType;
		}

		_activeType = activeType;
	}

	public String getOriginalActiveType() {
		return GetterUtil.getString(_originalActiveType);
	}

	@JSON
	@Override
	public int getDoiTuongSuDungId() {
		return _doiTuongSuDungId;
	}

	@Override
	public void setDoiTuongSuDungId(int doiTuongSuDungId) {
		_doiTuongSuDungId = doiTuongSuDungId;
	}

	@JSON
	@Override
	public String getNoiDung() {
		if (_noiDung == null) {
			return "";
		}
		else {
			return _noiDung;
		}
	}

	@Override
	public void setNoiDung(String noiDung) {
		_noiDung = noiDung;
	}

	@JSON
	@Override
	public Date getNgayTao() {
		return _ngayTao;
	}

	@Override
	public void setNgayTao(Date ngayTao) {
		_ngayTao = ngayTao;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ThongTinDangKy.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ThongTinDangKy toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ThongTinDangKyImpl thongTinDangKyImpl = new ThongTinDangKyImpl();

		thongTinDangKyImpl.setId(getId());
		thongTinDangKyImpl.setEmailAddress(getEmailAddress());
		thongTinDangKyImpl.setUserName(getUserName());
		thongTinDangKyImpl.setSoGiayTo(getSoGiayTo());
		thongTinDangKyImpl.setMaKichHoat(getMaKichHoat());
		thongTinDangKyImpl.setActiveType(getActiveType());
		thongTinDangKyImpl.setDoiTuongSuDungId(getDoiTuongSuDungId());
		thongTinDangKyImpl.setNoiDung(getNoiDung());
		thongTinDangKyImpl.setNgayTao(getNgayTao());

		thongTinDangKyImpl.resetOriginalValues();

		return thongTinDangKyImpl;
	}

	@Override
	public int compareTo(ThongTinDangKy thongTinDangKy) {
		long primaryKey = thongTinDangKy.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ThongTinDangKy)) {
			return false;
		}

		ThongTinDangKy thongTinDangKy = (ThongTinDangKy)obj;

		long primaryKey = thongTinDangKy.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ThongTinDangKyModelImpl thongTinDangKyModelImpl = this;

		thongTinDangKyModelImpl._originalEmailAddress =
			thongTinDangKyModelImpl._emailAddress;

		thongTinDangKyModelImpl._originalUserName =
			thongTinDangKyModelImpl._userName;

		thongTinDangKyModelImpl._originalSoGiayTo =
			thongTinDangKyModelImpl._soGiayTo;

		thongTinDangKyModelImpl._originalMaKichHoat =
			thongTinDangKyModelImpl._maKichHoat;

		thongTinDangKyModelImpl._originalActiveType =
			thongTinDangKyModelImpl._activeType;

		thongTinDangKyModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ThongTinDangKy> toCacheModel() {
		ThongTinDangKyCacheModel thongTinDangKyCacheModel =
			new ThongTinDangKyCacheModel();

		thongTinDangKyCacheModel.id = getId();

		thongTinDangKyCacheModel.emailAddress = getEmailAddress();

		String emailAddress = thongTinDangKyCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			thongTinDangKyCacheModel.emailAddress = null;
		}

		thongTinDangKyCacheModel.userName = getUserName();

		String userName = thongTinDangKyCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			thongTinDangKyCacheModel.userName = null;
		}

		thongTinDangKyCacheModel.soGiayTo = getSoGiayTo();

		String soGiayTo = thongTinDangKyCacheModel.soGiayTo;

		if ((soGiayTo != null) && (soGiayTo.length() == 0)) {
			thongTinDangKyCacheModel.soGiayTo = null;
		}

		thongTinDangKyCacheModel.maKichHoat = getMaKichHoat();

		String maKichHoat = thongTinDangKyCacheModel.maKichHoat;

		if ((maKichHoat != null) && (maKichHoat.length() == 0)) {
			thongTinDangKyCacheModel.maKichHoat = null;
		}

		thongTinDangKyCacheModel.activeType = getActiveType();

		String activeType = thongTinDangKyCacheModel.activeType;

		if ((activeType != null) && (activeType.length() == 0)) {
			thongTinDangKyCacheModel.activeType = null;
		}

		thongTinDangKyCacheModel.doiTuongSuDungId = getDoiTuongSuDungId();

		thongTinDangKyCacheModel.noiDung = getNoiDung();

		String noiDung = thongTinDangKyCacheModel.noiDung;

		if ((noiDung != null) && (noiDung.length() == 0)) {
			thongTinDangKyCacheModel.noiDung = null;
		}

		Date ngayTao = getNgayTao();

		if (ngayTao != null) {
			thongTinDangKyCacheModel.ngayTao = ngayTao.getTime();
		}
		else {
			thongTinDangKyCacheModel.ngayTao = Long.MIN_VALUE;
		}

		return thongTinDangKyCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ThongTinDangKy, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ThongTinDangKy, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ThongTinDangKy, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ThongTinDangKy)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ThongTinDangKy, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ThongTinDangKy, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ThongTinDangKy, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ThongTinDangKy)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, ThongTinDangKy>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _id;
	private String _emailAddress;
	private String _originalEmailAddress;
	private String _userName;
	private String _originalUserName;
	private String _soGiayTo;
	private String _originalSoGiayTo;
	private String _maKichHoat;
	private String _originalMaKichHoat;
	private String _activeType;
	private String _originalActiveType;
	private int _doiTuongSuDungId;
	private String _noiDung;
	private Date _ngayTao;
	private long _columnBitmask;
	private ThongTinDangKy _escapedModel;

}