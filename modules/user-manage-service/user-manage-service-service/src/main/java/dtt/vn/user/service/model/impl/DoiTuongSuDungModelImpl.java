/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package dtt.vn.user.service.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import dtt.vn.user.service.model.DoiTuongSuDung;
import dtt.vn.user.service.model.DoiTuongSuDungModel;
import dtt.vn.user.service.model.DoiTuongSuDungSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DoiTuongSuDung service. Represents a row in the &quot;ttnd_doituongsudung&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>DoiTuongSuDungModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DoiTuongSuDungImpl}.
 * </p>
 *
 * @author nhanvienDTT
 * @see DoiTuongSuDungImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class DoiTuongSuDungModelImpl
	extends BaseModelImpl<DoiTuongSuDung> implements DoiTuongSuDungModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a doi tuong su dung model instance should use the <code>DoiTuongSuDung</code> interface instead.
	 */
	public static final String TABLE_NAME = "ttnd_doituongsudung";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"ma", Types.VARCHAR}, {"ten", Types.VARCHAR},
		{"loai", Types.INTEGER}, {"mota", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ma", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ten", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("loai", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("mota", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ttnd_doituongsudung (id LONG not null primary key,ma VARCHAR(75) null,ten VARCHAR(75) null,loai INTEGER,mota VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table ttnd_doituongsudung";

	public static final String ORDER_BY_JPQL =
		" ORDER BY doiTuongSuDung.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ttnd_doituongsudung.id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		dtt.vn.user.service.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.dtt.vn.user.service.model.DoiTuongSuDung"),
		false);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		dtt.vn.user.service.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.dtt.vn.user.service.model.DoiTuongSuDung"),
		false);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		dtt.vn.user.service.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.dtt.vn.user.service.model.DoiTuongSuDung"),
		true);

	public static final long MA_COLUMN_BITMASK = 1L;

	public static final long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DoiTuongSuDung toModel(DoiTuongSuDungSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DoiTuongSuDung model = new DoiTuongSuDungImpl();

		model.setId(soapModel.getId());
		model.setMa(soapModel.getMa());
		model.setTen(soapModel.getTen());
		model.setLoai(soapModel.getLoai());
		model.setMoTa(soapModel.getMoTa());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DoiTuongSuDung> toModels(
		DoiTuongSuDungSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<DoiTuongSuDung> models = new ArrayList<DoiTuongSuDung>(
			soapModels.length);

		for (DoiTuongSuDungSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		dtt.vn.user.service.service.util.ServiceProps.get(
			"lock.expiration.time.dtt.vn.user.service.model.DoiTuongSuDung"));

	public DoiTuongSuDungModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DoiTuongSuDung.class;
	}

	@Override
	public String getModelClassName() {
		return DoiTuongSuDung.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DoiTuongSuDung, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DoiTuongSuDung, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DoiTuongSuDung, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DoiTuongSuDung)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DoiTuongSuDung, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DoiTuongSuDung, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DoiTuongSuDung)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DoiTuongSuDung, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DoiTuongSuDung, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DoiTuongSuDung>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DoiTuongSuDung.class.getClassLoader(), DoiTuongSuDung.class,
			ModelWrapper.class);

		try {
			Constructor<DoiTuongSuDung> constructor =
				(Constructor<DoiTuongSuDung>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<DoiTuongSuDung, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DoiTuongSuDung, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DoiTuongSuDung, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<DoiTuongSuDung, Object>>();
		Map<String, BiConsumer<DoiTuongSuDung, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DoiTuongSuDung, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<DoiTuongSuDung, Object>() {

				@Override
				public Object apply(DoiTuongSuDung doiTuongSuDung) {
					return doiTuongSuDung.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<DoiTuongSuDung, Object>() {

				@Override
				public void accept(DoiTuongSuDung doiTuongSuDung, Object id) {
					doiTuongSuDung.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"ma",
			new Function<DoiTuongSuDung, Object>() {

				@Override
				public Object apply(DoiTuongSuDung doiTuongSuDung) {
					return doiTuongSuDung.getMa();
				}

			});
		attributeSetterBiConsumers.put(
			"ma",
			new BiConsumer<DoiTuongSuDung, Object>() {

				@Override
				public void accept(DoiTuongSuDung doiTuongSuDung, Object ma) {
					doiTuongSuDung.setMa((String)ma);
				}

			});
		attributeGetterFunctions.put(
			"ten",
			new Function<DoiTuongSuDung, Object>() {

				@Override
				public Object apply(DoiTuongSuDung doiTuongSuDung) {
					return doiTuongSuDung.getTen();
				}

			});
		attributeSetterBiConsumers.put(
			"ten",
			new BiConsumer<DoiTuongSuDung, Object>() {

				@Override
				public void accept(DoiTuongSuDung doiTuongSuDung, Object ten) {
					doiTuongSuDung.setTen((String)ten);
				}

			});
		attributeGetterFunctions.put(
			"loai",
			new Function<DoiTuongSuDung, Object>() {

				@Override
				public Object apply(DoiTuongSuDung doiTuongSuDung) {
					return doiTuongSuDung.getLoai();
				}

			});
		attributeSetterBiConsumers.put(
			"loai",
			new BiConsumer<DoiTuongSuDung, Object>() {

				@Override
				public void accept(DoiTuongSuDung doiTuongSuDung, Object loai) {
					doiTuongSuDung.setLoai((Integer)loai);
				}

			});
		attributeGetterFunctions.put(
			"moTa",
			new Function<DoiTuongSuDung, Object>() {

				@Override
				public Object apply(DoiTuongSuDung doiTuongSuDung) {
					return doiTuongSuDung.getMoTa();
				}

			});
		attributeSetterBiConsumers.put(
			"moTa",
			new BiConsumer<DoiTuongSuDung, Object>() {

				@Override
				public void accept(DoiTuongSuDung doiTuongSuDung, Object moTa) {
					doiTuongSuDung.setMoTa((String)moTa);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@JSON
	@Override
	public String getMa() {
		if (_ma == null) {
			return "";
		}
		else {
			return _ma;
		}
	}

	@Override
	public void setMa(String ma) {
		_columnBitmask |= MA_COLUMN_BITMASK;

		if (_originalMa == null) {
			_originalMa = _ma;
		}

		_ma = ma;
	}

	public String getOriginalMa() {
		return GetterUtil.getString(_originalMa);
	}

	@JSON
	@Override
	public String getTen() {
		if (_ten == null) {
			return "";
		}
		else {
			return _ten;
		}
	}

	@Override
	public void setTen(String ten) {
		_ten = ten;
	}

	@JSON
	@Override
	public int getLoai() {
		return _loai;
	}

	@Override
	public void setLoai(int loai) {
		_loai = loai;
	}

	@JSON
	@Override
	public String getMoTa() {
		if (_moTa == null) {
			return "";
		}
		else {
			return _moTa;
		}
	}

	@Override
	public void setMoTa(String moTa) {
		_moTa = moTa;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DoiTuongSuDung.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DoiTuongSuDung toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DoiTuongSuDungImpl doiTuongSuDungImpl = new DoiTuongSuDungImpl();

		doiTuongSuDungImpl.setId(getId());
		doiTuongSuDungImpl.setMa(getMa());
		doiTuongSuDungImpl.setTen(getTen());
		doiTuongSuDungImpl.setLoai(getLoai());
		doiTuongSuDungImpl.setMoTa(getMoTa());

		doiTuongSuDungImpl.resetOriginalValues();

		return doiTuongSuDungImpl;
	}

	@Override
	public int compareTo(DoiTuongSuDung doiTuongSuDung) {
		int value = 0;

		if (getId() < doiTuongSuDung.getId()) {
			value = -1;
		}
		else if (getId() > doiTuongSuDung.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DoiTuongSuDung)) {
			return false;
		}

		DoiTuongSuDung doiTuongSuDung = (DoiTuongSuDung)obj;

		long primaryKey = doiTuongSuDung.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DoiTuongSuDungModelImpl doiTuongSuDungModelImpl = this;

		doiTuongSuDungModelImpl._originalMa = doiTuongSuDungModelImpl._ma;

		doiTuongSuDungModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DoiTuongSuDung> toCacheModel() {
		DoiTuongSuDungCacheModel doiTuongSuDungCacheModel =
			new DoiTuongSuDungCacheModel();

		doiTuongSuDungCacheModel.id = getId();

		doiTuongSuDungCacheModel.ma = getMa();

		String ma = doiTuongSuDungCacheModel.ma;

		if ((ma != null) && (ma.length() == 0)) {
			doiTuongSuDungCacheModel.ma = null;
		}

		doiTuongSuDungCacheModel.ten = getTen();

		String ten = doiTuongSuDungCacheModel.ten;

		if ((ten != null) && (ten.length() == 0)) {
			doiTuongSuDungCacheModel.ten = null;
		}

		doiTuongSuDungCacheModel.loai = getLoai();

		doiTuongSuDungCacheModel.moTa = getMoTa();

		String moTa = doiTuongSuDungCacheModel.moTa;

		if ((moTa != null) && (moTa.length() == 0)) {
			doiTuongSuDungCacheModel.moTa = null;
		}

		return doiTuongSuDungCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DoiTuongSuDung, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DoiTuongSuDung, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DoiTuongSuDung, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((DoiTuongSuDung)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DoiTuongSuDung, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DoiTuongSuDung, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DoiTuongSuDung, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DoiTuongSuDung)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, DoiTuongSuDung>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _id;
	private String _ma;
	private String _originalMa;
	private String _ten;
	private int _loai;
	private String _moTa;
	private long _columnBitmask;
	private DoiTuongSuDung _escapedModel;

}