/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.core.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

import org.oep.core.model.ThamSo;
import org.oep.core.service.ThamSoLocalService;
import org.oep.core.service.persistence.LogSMSFinder;
import org.oep.core.service.persistence.LogSMSPersistence;
import org.oep.core.service.persistence.MailPersistence;
import org.oep.core.service.persistence.MappingVmapPersistence;
import org.oep.core.service.persistence.PhanQuyenPersistence;
import org.oep.core.service.persistence.ThamSoFinder;
import org.oep.core.service.persistence.ThamSoLoaiPersistence;
import org.oep.core.service.persistence.ThamSoPersistence;
import org.oep.core.service.persistence.TrungTamHanhChinhFinder;
import org.oep.core.service.persistence.TrungTamHanhChinhPersistence;

/**
 * Provides the base implementation for the tham so local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.oep.core.service.impl.ThamSoLocalServiceImpl}.
 * </p>
 *
 * @author manhlb
 * @see org.oep.core.service.impl.ThamSoLocalServiceImpl
 * @generated
 */
@ProviderType
public abstract class ThamSoLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements ThamSoLocalService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>ThamSoLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>org.oep.core.service.ThamSoLocalServiceUtil</code>.
	 */

	/**
	 * Adds the tham so to the database. Also notifies the appropriate model listeners.
	 *
	 * @param thamSo the tham so
	 * @return the tham so that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ThamSo addThamSo(ThamSo thamSo) {
		thamSo.setNew(true);

		return thamSoPersistence.update(thamSo);
	}

	/**
	 * Creates a new tham so with the primary key. Does not add the tham so to the database.
	 *
	 * @param id the primary key for the new tham so
	 * @return the new tham so
	 */
	@Override
	@Transactional(enabled = false)
	public ThamSo createThamSo(long id) {
		return thamSoPersistence.create(id);
	}

	/**
	 * Deletes the tham so with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param id the primary key of the tham so
	 * @return the tham so that was removed
	 * @throws PortalException if a tham so with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ThamSo deleteThamSo(long id) throws PortalException {
		return thamSoPersistence.remove(id);
	}

	/**
	 * Deletes the tham so from the database. Also notifies the appropriate model listeners.
	 *
	 * @param thamSo the tham so
	 * @return the tham so that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ThamSo deleteThamSo(ThamSo thamSo) {
		return thamSoPersistence.remove(thamSo);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			ThamSo.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return thamSoPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>org.oep.core.model.impl.ThamSoModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return thamSoPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>org.oep.core.model.impl.ThamSoModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return thamSoPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return thamSoPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return thamSoPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public ThamSo fetchThamSo(long id) {
		return thamSoPersistence.fetchByPrimaryKey(id);
	}

	/**
	 * Returns the tham so with the primary key.
	 *
	 * @param id the primary key of the tham so
	 * @return the tham so
	 * @throws PortalException if a tham so with the primary key could not be found
	 */
	@Override
	public ThamSo getThamSo(long id) throws PortalException {
		return thamSoPersistence.findByPrimaryKey(id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(thamSoLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ThamSo.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(thamSoLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(ThamSo.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(thamSoLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ThamSo.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return thamSoLocalService.deleteThamSo((ThamSo)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return thamSoPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the tham sos.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>org.oep.core.model.impl.ThamSoModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of tham sos
	 * @param end the upper bound of the range of tham sos (not inclusive)
	 * @return the range of tham sos
	 */
	@Override
	public List<ThamSo> getThamSos(int start, int end) {
		return thamSoPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of tham sos.
	 *
	 * @return the number of tham sos
	 */
	@Override
	public int getThamSosCount() {
		return thamSoPersistence.countAll();
	}

	/**
	 * Updates the tham so in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param thamSo the tham so
	 * @return the tham so that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ThamSo updateThamSo(ThamSo thamSo) {
		return thamSoPersistence.update(thamSo);
	}

	/**
	 * Returns the log sms local service.
	 *
	 * @return the log sms local service
	 */
	public org.oep.core.service.LogSMSLocalService getLogSMSLocalService() {
		return logSMSLocalService;
	}

	/**
	 * Sets the log sms local service.
	 *
	 * @param logSMSLocalService the log sms local service
	 */
	public void setLogSMSLocalService(
		org.oep.core.service.LogSMSLocalService logSMSLocalService) {

		this.logSMSLocalService = logSMSLocalService;
	}

	/**
	 * Returns the log sms persistence.
	 *
	 * @return the log sms persistence
	 */
	public LogSMSPersistence getLogSMSPersistence() {
		return logSMSPersistence;
	}

	/**
	 * Sets the log sms persistence.
	 *
	 * @param logSMSPersistence the log sms persistence
	 */
	public void setLogSMSPersistence(LogSMSPersistence logSMSPersistence) {
		this.logSMSPersistence = logSMSPersistence;
	}

	/**
	 * Returns the log sms finder.
	 *
	 * @return the log sms finder
	 */
	public LogSMSFinder getLogSMSFinder() {
		return logSMSFinder;
	}

	/**
	 * Sets the log sms finder.
	 *
	 * @param logSMSFinder the log sms finder
	 */
	public void setLogSMSFinder(LogSMSFinder logSMSFinder) {
		this.logSMSFinder = logSMSFinder;
	}

	/**
	 * Returns the mail local service.
	 *
	 * @return the mail local service
	 */
	public org.oep.core.service.MailLocalService getMailLocalService() {
		return mailLocalService;
	}

	/**
	 * Sets the mail local service.
	 *
	 * @param mailLocalService the mail local service
	 */
	public void setMailLocalService(
		org.oep.core.service.MailLocalService mailLocalService) {

		this.mailLocalService = mailLocalService;
	}

	/**
	 * Returns the mail persistence.
	 *
	 * @return the mail persistence
	 */
	public MailPersistence getMailPersistence() {
		return mailPersistence;
	}

	/**
	 * Sets the mail persistence.
	 *
	 * @param mailPersistence the mail persistence
	 */
	public void setMailPersistence(MailPersistence mailPersistence) {
		this.mailPersistence = mailPersistence;
	}

	/**
	 * Returns the mapping vmap local service.
	 *
	 * @return the mapping vmap local service
	 */
	public org.oep.core.service.MappingVmapLocalService
		getMappingVmapLocalService() {

		return mappingVmapLocalService;
	}

	/**
	 * Sets the mapping vmap local service.
	 *
	 * @param mappingVmapLocalService the mapping vmap local service
	 */
	public void setMappingVmapLocalService(
		org.oep.core.service.MappingVmapLocalService mappingVmapLocalService) {

		this.mappingVmapLocalService = mappingVmapLocalService;
	}

	/**
	 * Returns the mapping vmap persistence.
	 *
	 * @return the mapping vmap persistence
	 */
	public MappingVmapPersistence getMappingVmapPersistence() {
		return mappingVmapPersistence;
	}

	/**
	 * Sets the mapping vmap persistence.
	 *
	 * @param mappingVmapPersistence the mapping vmap persistence
	 */
	public void setMappingVmapPersistence(
		MappingVmapPersistence mappingVmapPersistence) {

		this.mappingVmapPersistence = mappingVmapPersistence;
	}

	/**
	 * Returns the phan quyen local service.
	 *
	 * @return the phan quyen local service
	 */
	public org.oep.core.service.PhanQuyenLocalService
		getPhanQuyenLocalService() {

		return phanQuyenLocalService;
	}

	/**
	 * Sets the phan quyen local service.
	 *
	 * @param phanQuyenLocalService the phan quyen local service
	 */
	public void setPhanQuyenLocalService(
		org.oep.core.service.PhanQuyenLocalService phanQuyenLocalService) {

		this.phanQuyenLocalService = phanQuyenLocalService;
	}

	/**
	 * Returns the phan quyen persistence.
	 *
	 * @return the phan quyen persistence
	 */
	public PhanQuyenPersistence getPhanQuyenPersistence() {
		return phanQuyenPersistence;
	}

	/**
	 * Sets the phan quyen persistence.
	 *
	 * @param phanQuyenPersistence the phan quyen persistence
	 */
	public void setPhanQuyenPersistence(
		PhanQuyenPersistence phanQuyenPersistence) {

		this.phanQuyenPersistence = phanQuyenPersistence;
	}

	/**
	 * Returns the tham so local service.
	 *
	 * @return the tham so local service
	 */
	public ThamSoLocalService getThamSoLocalService() {
		return thamSoLocalService;
	}

	/**
	 * Sets the tham so local service.
	 *
	 * @param thamSoLocalService the tham so local service
	 */
	public void setThamSoLocalService(ThamSoLocalService thamSoLocalService) {
		this.thamSoLocalService = thamSoLocalService;
	}

	/**
	 * Returns the tham so persistence.
	 *
	 * @return the tham so persistence
	 */
	public ThamSoPersistence getThamSoPersistence() {
		return thamSoPersistence;
	}

	/**
	 * Sets the tham so persistence.
	 *
	 * @param thamSoPersistence the tham so persistence
	 */
	public void setThamSoPersistence(ThamSoPersistence thamSoPersistence) {
		this.thamSoPersistence = thamSoPersistence;
	}

	/**
	 * Returns the tham so finder.
	 *
	 * @return the tham so finder
	 */
	public ThamSoFinder getThamSoFinder() {
		return thamSoFinder;
	}

	/**
	 * Sets the tham so finder.
	 *
	 * @param thamSoFinder the tham so finder
	 */
	public void setThamSoFinder(ThamSoFinder thamSoFinder) {
		this.thamSoFinder = thamSoFinder;
	}

	/**
	 * Returns the tham so loai local service.
	 *
	 * @return the tham so loai local service
	 */
	public org.oep.core.service.ThamSoLoaiLocalService
		getThamSoLoaiLocalService() {

		return thamSoLoaiLocalService;
	}

	/**
	 * Sets the tham so loai local service.
	 *
	 * @param thamSoLoaiLocalService the tham so loai local service
	 */
	public void setThamSoLoaiLocalService(
		org.oep.core.service.ThamSoLoaiLocalService thamSoLoaiLocalService) {

		this.thamSoLoaiLocalService = thamSoLoaiLocalService;
	}

	/**
	 * Returns the tham so loai persistence.
	 *
	 * @return the tham so loai persistence
	 */
	public ThamSoLoaiPersistence getThamSoLoaiPersistence() {
		return thamSoLoaiPersistence;
	}

	/**
	 * Sets the tham so loai persistence.
	 *
	 * @param thamSoLoaiPersistence the tham so loai persistence
	 */
	public void setThamSoLoaiPersistence(
		ThamSoLoaiPersistence thamSoLoaiPersistence) {

		this.thamSoLoaiPersistence = thamSoLoaiPersistence;
	}

	/**
	 * Returns the trung tam hanh chinh local service.
	 *
	 * @return the trung tam hanh chinh local service
	 */
	public org.oep.core.service.TrungTamHanhChinhLocalService
		getTrungTamHanhChinhLocalService() {

		return trungTamHanhChinhLocalService;
	}

	/**
	 * Sets the trung tam hanh chinh local service.
	 *
	 * @param trungTamHanhChinhLocalService the trung tam hanh chinh local service
	 */
	public void setTrungTamHanhChinhLocalService(
		org.oep.core.service.TrungTamHanhChinhLocalService
			trungTamHanhChinhLocalService) {

		this.trungTamHanhChinhLocalService = trungTamHanhChinhLocalService;
	}

	/**
	 * Returns the trung tam hanh chinh persistence.
	 *
	 * @return the trung tam hanh chinh persistence
	 */
	public TrungTamHanhChinhPersistence getTrungTamHanhChinhPersistence() {
		return trungTamHanhChinhPersistence;
	}

	/**
	 * Sets the trung tam hanh chinh persistence.
	 *
	 * @param trungTamHanhChinhPersistence the trung tam hanh chinh persistence
	 */
	public void setTrungTamHanhChinhPersistence(
		TrungTamHanhChinhPersistence trungTamHanhChinhPersistence) {

		this.trungTamHanhChinhPersistence = trungTamHanhChinhPersistence;
	}

	/**
	 * Returns the trung tam hanh chinh finder.
	 *
	 * @return the trung tam hanh chinh finder
	 */
	public TrungTamHanhChinhFinder getTrungTamHanhChinhFinder() {
		return trungTamHanhChinhFinder;
	}

	/**
	 * Sets the trung tam hanh chinh finder.
	 *
	 * @param trungTamHanhChinhFinder the trung tam hanh chinh finder
	 */
	public void setTrungTamHanhChinhFinder(
		TrungTamHanhChinhFinder trungTamHanhChinhFinder) {

		this.trungTamHanhChinhFinder = trungTamHanhChinhFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService
		getClassNameLocalService() {

		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService
			classNameLocalService) {

		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {

		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService
		getResourceLocalService() {

		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService
			resourceLocalService) {

		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService
		getUserLocalService() {

		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {

		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register(
			"org.oep.core.model.ThamSo", thamSoLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"org.oep.core.model.ThamSo");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ThamSoLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return ThamSo.class;
	}

	protected String getModelClassName() {
		return ThamSo.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = thamSoPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.oep.core.service.LogSMSLocalService.class)
	protected org.oep.core.service.LogSMSLocalService logSMSLocalService;

	@BeanReference(type = LogSMSPersistence.class)
	protected LogSMSPersistence logSMSPersistence;

	@BeanReference(type = LogSMSFinder.class)
	protected LogSMSFinder logSMSFinder;

	@BeanReference(type = org.oep.core.service.MailLocalService.class)
	protected org.oep.core.service.MailLocalService mailLocalService;

	@BeanReference(type = MailPersistence.class)
	protected MailPersistence mailPersistence;

	@BeanReference(type = org.oep.core.service.MappingVmapLocalService.class)
	protected org.oep.core.service.MappingVmapLocalService
		mappingVmapLocalService;

	@BeanReference(type = MappingVmapPersistence.class)
	protected MappingVmapPersistence mappingVmapPersistence;

	@BeanReference(type = org.oep.core.service.PhanQuyenLocalService.class)
	protected org.oep.core.service.PhanQuyenLocalService phanQuyenLocalService;

	@BeanReference(type = PhanQuyenPersistence.class)
	protected PhanQuyenPersistence phanQuyenPersistence;

	@BeanReference(type = ThamSoLocalService.class)
	protected ThamSoLocalService thamSoLocalService;

	@BeanReference(type = ThamSoPersistence.class)
	protected ThamSoPersistence thamSoPersistence;

	@BeanReference(type = ThamSoFinder.class)
	protected ThamSoFinder thamSoFinder;

	@BeanReference(type = org.oep.core.service.ThamSoLoaiLocalService.class)
	protected org.oep.core.service.ThamSoLoaiLocalService
		thamSoLoaiLocalService;

	@BeanReference(type = ThamSoLoaiPersistence.class)
	protected ThamSoLoaiPersistence thamSoLoaiPersistence;

	@BeanReference(
		type = org.oep.core.service.TrungTamHanhChinhLocalService.class
	)
	protected org.oep.core.service.TrungTamHanhChinhLocalService
		trungTamHanhChinhLocalService;

	@BeanReference(type = TrungTamHanhChinhPersistence.class)
	protected TrungTamHanhChinhPersistence trungTamHanhChinhPersistence;

	@BeanReference(type = TrungTamHanhChinhFinder.class)
	protected TrungTamHanhChinhFinder trungTamHanhChinhFinder;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ClassNameLocalService.class
	)
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.ResourceLocalService.class
	)
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@ServiceReference(
		type = com.liferay.portal.kernel.service.UserLocalService.class
	)
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;

	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry
		persistedModelLocalServiceRegistry;

}