/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.core.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.oep.core.model.LogSMS;
import org.oep.core.model.LogSMSModel;
import org.oep.core.model.LogSMSSoap;

/**
 * The base model implementation for the LogSMS service. Represents a row in the &quot;oep_logs_sms&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>LogSMSModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LogSMSImpl}.
 * </p>
 *
 * @author manhlb
 * @see LogSMSImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class LogSMSModelImpl
	extends BaseModelImpl<LogSMS> implements LogSMSModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a log sms model instance should use the <code>LogSMS</code> interface instead.
	 */
	public static final String TABLE_NAME = "oep_logs_sms";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"sent_date_time", Types.TIMESTAMP},
		{"phone", Types.VARCHAR}, {"response_date", Types.TIMESTAMP},
		{"error_code", Types.VARCHAR}, {"error_detail", Types.VARCHAR},
		{"message_id", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sent_date_time", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("phone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("response_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("error_code", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("error_detail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("message_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table oep_logs_sms (id LONG not null primary key,sent_date_time DATE null,phone VARCHAR(75) null,response_date DATE null,error_code VARCHAR(75) null,error_detail VARCHAR(75) null,message_id LONG)";

	public static final String TABLE_SQL_DROP = "drop table oep_logs_sms";

	public static final String ORDER_BY_JPQL =
		" ORDER BY logSMS.sentDateTime DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY oep_logs_sms.sent_date_time DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		org.oep.core.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.org.oep.core.model.LogSMS"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		org.oep.core.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.org.oep.core.model.LogSMS"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LogSMS toModel(LogSMSSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LogSMS model = new LogSMSImpl();

		model.setId(soapModel.getId());
		model.setSentDateTime(soapModel.getSentDateTime());
		model.setPhone(soapModel.getPhone());
		model.setResponseDate(soapModel.getResponseDate());
		model.setErrorCode(soapModel.getErrorCode());
		model.setErrorDetail(soapModel.getErrorDetail());
		model.setMessageId(soapModel.getMessageId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LogSMS> toModels(LogSMSSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LogSMS> models = new ArrayList<LogSMS>(soapModels.length);

		for (LogSMSSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		org.oep.core.service.util.ServiceProps.get(
			"lock.expiration.time.org.oep.core.model.LogSMS"));

	public LogSMSModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LogSMS.class;
	}

	@Override
	public String getModelClassName() {
		return LogSMS.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<LogSMS, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<LogSMS, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LogSMS, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((LogSMS)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<LogSMS, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<LogSMS, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(LogSMS)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<LogSMS, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<LogSMS, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, LogSMS>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			LogSMS.class.getClassLoader(), LogSMS.class, ModelWrapper.class);

		try {
			Constructor<LogSMS> constructor =
				(Constructor<LogSMS>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<LogSMS, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<LogSMS, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<LogSMS, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<LogSMS, Object>>();
		Map<String, BiConsumer<LogSMS, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<LogSMS, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<LogSMS, Object>() {

				@Override
				public Object apply(LogSMS logSMS) {
					return logSMS.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<LogSMS, Object>() {

				@Override
				public void accept(LogSMS logSMS, Object id) {
					logSMS.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"sentDateTime",
			new Function<LogSMS, Object>() {

				@Override
				public Object apply(LogSMS logSMS) {
					return logSMS.getSentDateTime();
				}

			});
		attributeSetterBiConsumers.put(
			"sentDateTime",
			new BiConsumer<LogSMS, Object>() {

				@Override
				public void accept(LogSMS logSMS, Object sentDateTime) {
					logSMS.setSentDateTime((Date)sentDateTime);
				}

			});
		attributeGetterFunctions.put(
			"phone",
			new Function<LogSMS, Object>() {

				@Override
				public Object apply(LogSMS logSMS) {
					return logSMS.getPhone();
				}

			});
		attributeSetterBiConsumers.put(
			"phone",
			new BiConsumer<LogSMS, Object>() {

				@Override
				public void accept(LogSMS logSMS, Object phone) {
					logSMS.setPhone((String)phone);
				}

			});
		attributeGetterFunctions.put(
			"responseDate",
			new Function<LogSMS, Object>() {

				@Override
				public Object apply(LogSMS logSMS) {
					return logSMS.getResponseDate();
				}

			});
		attributeSetterBiConsumers.put(
			"responseDate",
			new BiConsumer<LogSMS, Object>() {

				@Override
				public void accept(LogSMS logSMS, Object responseDate) {
					logSMS.setResponseDate((Date)responseDate);
				}

			});
		attributeGetterFunctions.put(
			"errorCode",
			new Function<LogSMS, Object>() {

				@Override
				public Object apply(LogSMS logSMS) {
					return logSMS.getErrorCode();
				}

			});
		attributeSetterBiConsumers.put(
			"errorCode",
			new BiConsumer<LogSMS, Object>() {

				@Override
				public void accept(LogSMS logSMS, Object errorCode) {
					logSMS.setErrorCode((String)errorCode);
				}

			});
		attributeGetterFunctions.put(
			"errorDetail",
			new Function<LogSMS, Object>() {

				@Override
				public Object apply(LogSMS logSMS) {
					return logSMS.getErrorDetail();
				}

			});
		attributeSetterBiConsumers.put(
			"errorDetail",
			new BiConsumer<LogSMS, Object>() {

				@Override
				public void accept(LogSMS logSMS, Object errorDetail) {
					logSMS.setErrorDetail((String)errorDetail);
				}

			});
		attributeGetterFunctions.put(
			"messageId",
			new Function<LogSMS, Object>() {

				@Override
				public Object apply(LogSMS logSMS) {
					return logSMS.getMessageId();
				}

			});
		attributeSetterBiConsumers.put(
			"messageId",
			new BiConsumer<LogSMS, Object>() {

				@Override
				public void accept(LogSMS logSMS, Object messageId) {
					logSMS.setMessageId((Long)messageId);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public Date getSentDateTime() {
		return _sentDateTime;
	}

	@Override
	public void setSentDateTime(Date sentDateTime) {
		_sentDateTime = sentDateTime;
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return "";
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	@JSON
	@Override
	public Date getResponseDate() {
		return _responseDate;
	}

	@Override
	public void setResponseDate(Date responseDate) {
		_responseDate = responseDate;
	}

	@JSON
	@Override
	public String getErrorCode() {
		if (_errorCode == null) {
			return "";
		}
		else {
			return _errorCode;
		}
	}

	@Override
	public void setErrorCode(String errorCode) {
		_errorCode = errorCode;
	}

	@JSON
	@Override
	public String getErrorDetail() {
		if (_errorDetail == null) {
			return "";
		}
		else {
			return _errorDetail;
		}
	}

	@Override
	public void setErrorDetail(String errorDetail) {
		_errorDetail = errorDetail;
	}

	@JSON
	@Override
	public long getMessageId() {
		return _messageId;
	}

	@Override
	public void setMessageId(long messageId) {
		_messageId = messageId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, LogSMS.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LogSMS toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LogSMSImpl logSMSImpl = new LogSMSImpl();

		logSMSImpl.setId(getId());
		logSMSImpl.setSentDateTime(getSentDateTime());
		logSMSImpl.setPhone(getPhone());
		logSMSImpl.setResponseDate(getResponseDate());
		logSMSImpl.setErrorCode(getErrorCode());
		logSMSImpl.setErrorDetail(getErrorDetail());
		logSMSImpl.setMessageId(getMessageId());

		logSMSImpl.resetOriginalValues();

		return logSMSImpl;
	}

	@Override
	public int compareTo(LogSMS logSMS) {
		int value = 0;

		value = DateUtil.compareTo(getSentDateTime(), logSMS.getSentDateTime());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LogSMS)) {
			return false;
		}

		LogSMS logSMS = (LogSMS)obj;

		long primaryKey = logSMS.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<LogSMS> toCacheModel() {
		LogSMSCacheModel logSMSCacheModel = new LogSMSCacheModel();

		logSMSCacheModel.id = getId();

		Date sentDateTime = getSentDateTime();

		if (sentDateTime != null) {
			logSMSCacheModel.sentDateTime = sentDateTime.getTime();
		}
		else {
			logSMSCacheModel.sentDateTime = Long.MIN_VALUE;
		}

		logSMSCacheModel.phone = getPhone();

		String phone = logSMSCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			logSMSCacheModel.phone = null;
		}

		Date responseDate = getResponseDate();

		if (responseDate != null) {
			logSMSCacheModel.responseDate = responseDate.getTime();
		}
		else {
			logSMSCacheModel.responseDate = Long.MIN_VALUE;
		}

		logSMSCacheModel.errorCode = getErrorCode();

		String errorCode = logSMSCacheModel.errorCode;

		if ((errorCode != null) && (errorCode.length() == 0)) {
			logSMSCacheModel.errorCode = null;
		}

		logSMSCacheModel.errorDetail = getErrorDetail();

		String errorDetail = logSMSCacheModel.errorDetail;

		if ((errorDetail != null) && (errorDetail.length() == 0)) {
			logSMSCacheModel.errorDetail = null;
		}

		logSMSCacheModel.messageId = getMessageId();

		return logSMSCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<LogSMS, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<LogSMS, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LogSMS, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((LogSMS)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<LogSMS, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<LogSMS, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<LogSMS, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((LogSMS)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, LogSMS>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _id;
	private Date _sentDateTime;
	private String _phone;
	private Date _responseDate;
	private String _errorCode;
	private String _errorDetail;
	private long _messageId;
	private LogSMS _escapedModel;

}