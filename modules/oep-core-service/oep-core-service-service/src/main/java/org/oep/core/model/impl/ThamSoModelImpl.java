/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.core.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.oep.core.model.ThamSo;
import org.oep.core.model.ThamSoModel;

/**
 * The base model implementation for the ThamSo service. Represents a row in the &quot;oep_thamso&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ThamSoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ThamSoImpl}.
 * </p>
 *
 * @author manhlb
 * @see ThamSoImpl
 * @generated
 */
@ProviderType
public class ThamSoModelImpl
	extends BaseModelImpl<ThamSo> implements ThamSoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a tham so model instance should use the <code>ThamSo</code> interface instead.
	 */
	public static final String TABLE_NAME = "oep_thamso";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"group_id", Types.BIGINT},
		{"classname", Types.VARCHAR}, {"classpk", Types.BIGINT},
		{"loai_id", Types.BIGINT}, {"ma", Types.VARCHAR},
		{"giatri", Types.VARCHAR}, {"mota", Types.VARCHAR},
		{"trangthai", Types.BOOLEAN}, {"quyen_tac_dong", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("group_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("classpk", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("loai_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ma", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("giatri", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mota", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trangthai", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("quyen_tac_dong", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table oep_thamso (id LONG not null primary key,group_id LONG,classname VARCHAR(75) null,classpk LONG,loai_id LONG,ma VARCHAR(75) null,giatri VARCHAR(75) null,mota VARCHAR(75) null,trangthai BOOLEAN,quyen_tac_dong INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table oep_thamso";

	public static final String ORDER_BY_JPQL = " ORDER BY thamSo.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY oep_thamso.id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		org.oep.core.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.org.oep.core.model.ThamSo"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		org.oep.core.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.org.oep.core.model.ThamSo"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		org.oep.core.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.org.oep.core.model.ThamSo"),
		true);

	public static final long CLASSNAME_COLUMN_BITMASK = 1L;

	public static final long CLASSPK_COLUMN_BITMASK = 2L;

	public static final long GIATRI_COLUMN_BITMASK = 4L;

	public static final long GROUPID_COLUMN_BITMASK = 8L;

	public static final long MA_COLUMN_BITMASK = 16L;

	public static final long ID_COLUMN_BITMASK = 32L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		org.oep.core.service.util.ServiceProps.get(
			"lock.expiration.time.org.oep.core.model.ThamSo"));

	public ThamSoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ThamSo.class;
	}

	@Override
	public String getModelClassName() {
		return ThamSo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ThamSo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ThamSo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ThamSo, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((ThamSo)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ThamSo, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ThamSo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ThamSo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ThamSo, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ThamSo, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ThamSo>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ThamSo.class.getClassLoader(), ThamSo.class, ModelWrapper.class);

		try {
			Constructor<ThamSo> constructor =
				(Constructor<ThamSo>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<ThamSo, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ThamSo, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ThamSo, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ThamSo, Object>>();
		Map<String, BiConsumer<ThamSo, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ThamSo, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<ThamSo, Object>() {

				@Override
				public Object apply(ThamSo thamSo) {
					return thamSo.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<ThamSo, Object>() {

				@Override
				public void accept(ThamSo thamSo, Object id) {
					thamSo.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"groupId",
			new Function<ThamSo, Object>() {

				@Override
				public Object apply(ThamSo thamSo) {
					return thamSo.getGroupId();
				}

			});
		attributeSetterBiConsumers.put(
			"groupId",
			new BiConsumer<ThamSo, Object>() {

				@Override
				public void accept(ThamSo thamSo, Object groupId) {
					thamSo.setGroupId((Long)groupId);
				}

			});
		attributeGetterFunctions.put(
			"className",
			new Function<ThamSo, Object>() {

				@Override
				public Object apply(ThamSo thamSo) {
					return thamSo.getClassName();
				}

			});
		attributeSetterBiConsumers.put(
			"className",
			new BiConsumer<ThamSo, Object>() {

				@Override
				public void accept(ThamSo thamSo, Object className) {
					thamSo.setClassName((String)className);
				}

			});
		attributeGetterFunctions.put(
			"classPK",
			new Function<ThamSo, Object>() {

				@Override
				public Object apply(ThamSo thamSo) {
					return thamSo.getClassPK();
				}

			});
		attributeSetterBiConsumers.put(
			"classPK",
			new BiConsumer<ThamSo, Object>() {

				@Override
				public void accept(ThamSo thamSo, Object classPK) {
					thamSo.setClassPK((Long)classPK);
				}

			});
		attributeGetterFunctions.put(
			"loaiId",
			new Function<ThamSo, Object>() {

				@Override
				public Object apply(ThamSo thamSo) {
					return thamSo.getLoaiId();
				}

			});
		attributeSetterBiConsumers.put(
			"loaiId",
			new BiConsumer<ThamSo, Object>() {

				@Override
				public void accept(ThamSo thamSo, Object loaiId) {
					thamSo.setLoaiId((Long)loaiId);
				}

			});
		attributeGetterFunctions.put(
			"ma",
			new Function<ThamSo, Object>() {

				@Override
				public Object apply(ThamSo thamSo) {
					return thamSo.getMa();
				}

			});
		attributeSetterBiConsumers.put(
			"ma",
			new BiConsumer<ThamSo, Object>() {

				@Override
				public void accept(ThamSo thamSo, Object ma) {
					thamSo.setMa((String)ma);
				}

			});
		attributeGetterFunctions.put(
			"giaTri",
			new Function<ThamSo, Object>() {

				@Override
				public Object apply(ThamSo thamSo) {
					return thamSo.getGiaTri();
				}

			});
		attributeSetterBiConsumers.put(
			"giaTri",
			new BiConsumer<ThamSo, Object>() {

				@Override
				public void accept(ThamSo thamSo, Object giaTri) {
					thamSo.setGiaTri((String)giaTri);
				}

			});
		attributeGetterFunctions.put(
			"moTa",
			new Function<ThamSo, Object>() {

				@Override
				public Object apply(ThamSo thamSo) {
					return thamSo.getMoTa();
				}

			});
		attributeSetterBiConsumers.put(
			"moTa",
			new BiConsumer<ThamSo, Object>() {

				@Override
				public void accept(ThamSo thamSo, Object moTa) {
					thamSo.setMoTa((String)moTa);
				}

			});
		attributeGetterFunctions.put(
			"trangThai",
			new Function<ThamSo, Object>() {

				@Override
				public Object apply(ThamSo thamSo) {
					return thamSo.getTrangThai();
				}

			});
		attributeSetterBiConsumers.put(
			"trangThai",
			new BiConsumer<ThamSo, Object>() {

				@Override
				public void accept(ThamSo thamSo, Object trangThai) {
					thamSo.setTrangThai((Boolean)trangThai);
				}

			});
		attributeGetterFunctions.put(
			"quyenTacDong",
			new Function<ThamSo, Object>() {

				@Override
				public Object apply(ThamSo thamSo) {
					return thamSo.getQuyenTacDong();
				}

			});
		attributeSetterBiConsumers.put(
			"quyenTacDong",
			new BiConsumer<ThamSo, Object>() {

				@Override
				public void accept(ThamSo thamSo, Object quyenTacDong) {
					thamSo.setQuyenTacDong((Integer)quyenTacDong);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public String getClassName() {
		if (_className == null) {
			return "";
		}
		else {
			return _className;
		}
	}

	@Override
	public void setClassName(String className) {
		_columnBitmask |= CLASSNAME_COLUMN_BITMASK;

		if (_originalClassName == null) {
			_originalClassName = _className;
		}

		_className = className;
	}

	public String getOriginalClassName() {
		return GetterUtil.getString(_originalClassName);
	}

	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	@Override
	public long getLoaiId() {
		return _loaiId;
	}

	@Override
	public void setLoaiId(long loaiId) {
		_loaiId = loaiId;
	}

	@Override
	public String getMa() {
		if (_ma == null) {
			return "";
		}
		else {
			return _ma;
		}
	}

	@Override
	public void setMa(String ma) {
		_columnBitmask |= MA_COLUMN_BITMASK;

		if (_originalMa == null) {
			_originalMa = _ma;
		}

		_ma = ma;
	}

	public String getOriginalMa() {
		return GetterUtil.getString(_originalMa);
	}

	@Override
	public String getGiaTri() {
		if (_giaTri == null) {
			return "";
		}
		else {
			return _giaTri;
		}
	}

	@Override
	public void setGiaTri(String giaTri) {
		_columnBitmask |= GIATRI_COLUMN_BITMASK;

		if (_originalGiaTri == null) {
			_originalGiaTri = _giaTri;
		}

		_giaTri = giaTri;
	}

	public String getOriginalGiaTri() {
		return GetterUtil.getString(_originalGiaTri);
	}

	@Override
	public String getMoTa() {
		if (_moTa == null) {
			return "";
		}
		else {
			return _moTa;
		}
	}

	@Override
	public void setMoTa(String moTa) {
		_moTa = moTa;
	}

	@Override
	public boolean getTrangThai() {
		return _trangThai;
	}

	@Override
	public boolean isTrangThai() {
		return _trangThai;
	}

	@Override
	public void setTrangThai(boolean trangThai) {
		_trangThai = trangThai;
	}

	@Override
	public int getQuyenTacDong() {
		return _quyenTacDong;
	}

	@Override
	public void setQuyenTacDong(int quyenTacDong) {
		_quyenTacDong = quyenTacDong;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ThamSo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ThamSo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ThamSoImpl thamSoImpl = new ThamSoImpl();

		thamSoImpl.setId(getId());
		thamSoImpl.setGroupId(getGroupId());
		thamSoImpl.setClassName(getClassName());
		thamSoImpl.setClassPK(getClassPK());
		thamSoImpl.setLoaiId(getLoaiId());
		thamSoImpl.setMa(getMa());
		thamSoImpl.setGiaTri(getGiaTri());
		thamSoImpl.setMoTa(getMoTa());
		thamSoImpl.setTrangThai(isTrangThai());
		thamSoImpl.setQuyenTacDong(getQuyenTacDong());

		thamSoImpl.resetOriginalValues();

		return thamSoImpl;
	}

	@Override
	public int compareTo(ThamSo thamSo) {
		long primaryKey = thamSo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ThamSo)) {
			return false;
		}

		ThamSo thamSo = (ThamSo)obj;

		long primaryKey = thamSo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ThamSoModelImpl thamSoModelImpl = this;

		thamSoModelImpl._originalGroupId = thamSoModelImpl._groupId;

		thamSoModelImpl._setOriginalGroupId = false;

		thamSoModelImpl._originalClassName = thamSoModelImpl._className;

		thamSoModelImpl._originalClassPK = thamSoModelImpl._classPK;

		thamSoModelImpl._setOriginalClassPK = false;

		thamSoModelImpl._originalMa = thamSoModelImpl._ma;

		thamSoModelImpl._originalGiaTri = thamSoModelImpl._giaTri;

		thamSoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ThamSo> toCacheModel() {
		ThamSoCacheModel thamSoCacheModel = new ThamSoCacheModel();

		thamSoCacheModel.id = getId();

		thamSoCacheModel.groupId = getGroupId();

		thamSoCacheModel.className = getClassName();

		String className = thamSoCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			thamSoCacheModel.className = null;
		}

		thamSoCacheModel.classPK = getClassPK();

		thamSoCacheModel.loaiId = getLoaiId();

		thamSoCacheModel.ma = getMa();

		String ma = thamSoCacheModel.ma;

		if ((ma != null) && (ma.length() == 0)) {
			thamSoCacheModel.ma = null;
		}

		thamSoCacheModel.giaTri = getGiaTri();

		String giaTri = thamSoCacheModel.giaTri;

		if ((giaTri != null) && (giaTri.length() == 0)) {
			thamSoCacheModel.giaTri = null;
		}

		thamSoCacheModel.moTa = getMoTa();

		String moTa = thamSoCacheModel.moTa;

		if ((moTa != null) && (moTa.length() == 0)) {
			thamSoCacheModel.moTa = null;
		}

		thamSoCacheModel.trangThai = isTrangThai();

		thamSoCacheModel.quyenTacDong = getQuyenTacDong();

		return thamSoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ThamSo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ThamSo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ThamSo, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((ThamSo)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<ThamSo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<ThamSo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ThamSo, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((ThamSo)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, ThamSo>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _id;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private String _className;
	private String _originalClassName;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private long _loaiId;
	private String _ma;
	private String _originalMa;
	private String _giaTri;
	private String _originalGiaTri;
	private String _moTa;
	private boolean _trangThai;
	private int _quyenTacDong;
	private long _columnBitmask;
	private ThamSo _escapedModel;

}