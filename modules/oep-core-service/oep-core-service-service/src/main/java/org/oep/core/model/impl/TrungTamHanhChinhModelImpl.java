/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.core.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.oep.core.model.TrungTamHanhChinh;
import org.oep.core.model.TrungTamHanhChinhModel;

/**
 * The base model implementation for the TrungTamHanhChinh service. Represents a row in the &quot;idm_trungtamhanhchinh&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>TrungTamHanhChinhModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TrungTamHanhChinhImpl}.
 * </p>
 *
 * @author manhlb
 * @see TrungTamHanhChinhImpl
 * @generated
 */
@ProviderType
public class TrungTamHanhChinhModelImpl
	extends BaseModelImpl<TrungTamHanhChinh> implements TrungTamHanhChinhModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a trung tam hanh chinh model instance should use the <code>TrungTamHanhChinh</code> interface instead.
	 */
	public static final String TABLE_NAME = "idm_trungtamhanhchinh";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"ma", Types.VARCHAR}, {"ten", Types.VARCHAR},
		{"donvi_id", Types.BIGINT}, {"donvi_ids", Types.VARCHAR},
		{"thongtin_lienhe", Types.VARCHAR}, {"trangthai", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ma", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ten", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("donvi_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("donvi_ids", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("thongtin_lienhe", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trangthai", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table idm_trungtamhanhchinh (id LONG not null primary key,ma VARCHAR(75) null,ten VARCHAR(75) null,donvi_id LONG,donvi_ids VARCHAR(75) null,thongtin_lienhe VARCHAR(75) null,trangthai INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table idm_trungtamhanhchinh";

	public static final String ORDER_BY_JPQL =
		" ORDER BY trungTamHanhChinh.id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY idm_trungtamhanhchinh.id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		org.oep.core.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.org.oep.core.model.TrungTamHanhChinh"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		org.oep.core.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.org.oep.core.model.TrungTamHanhChinh"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		org.oep.core.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.org.oep.core.model.TrungTamHanhChinh"),
		true);

	public static final long DONVIID_COLUMN_BITMASK = 1L;

	public static final long MA_COLUMN_BITMASK = 2L;

	public static final long ID_COLUMN_BITMASK = 4L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		org.oep.core.service.util.ServiceProps.get(
			"lock.expiration.time.org.oep.core.model.TrungTamHanhChinh"));

	public TrungTamHanhChinhModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TrungTamHanhChinh.class;
	}

	@Override
	public String getModelClassName() {
		return TrungTamHanhChinh.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TrungTamHanhChinh, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TrungTamHanhChinh, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TrungTamHanhChinh, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TrungTamHanhChinh)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TrungTamHanhChinh, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TrungTamHanhChinh, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TrungTamHanhChinh)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TrungTamHanhChinh, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TrungTamHanhChinh, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, TrungTamHanhChinh>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			TrungTamHanhChinh.class.getClassLoader(), TrungTamHanhChinh.class,
			ModelWrapper.class);

		try {
			Constructor<TrungTamHanhChinh> constructor =
				(Constructor<TrungTamHanhChinh>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<TrungTamHanhChinh, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TrungTamHanhChinh, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TrungTamHanhChinh, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<TrungTamHanhChinh, Object>>();
		Map<String, BiConsumer<TrungTamHanhChinh, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<TrungTamHanhChinh, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<TrungTamHanhChinh, Object>() {

				@Override
				public Object apply(TrungTamHanhChinh trungTamHanhChinh) {
					return trungTamHanhChinh.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<TrungTamHanhChinh, Object>() {

				@Override
				public void accept(
					TrungTamHanhChinh trungTamHanhChinh, Object id) {

					trungTamHanhChinh.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"ma",
			new Function<TrungTamHanhChinh, Object>() {

				@Override
				public Object apply(TrungTamHanhChinh trungTamHanhChinh) {
					return trungTamHanhChinh.getMa();
				}

			});
		attributeSetterBiConsumers.put(
			"ma",
			new BiConsumer<TrungTamHanhChinh, Object>() {

				@Override
				public void accept(
					TrungTamHanhChinh trungTamHanhChinh, Object ma) {

					trungTamHanhChinh.setMa((String)ma);
				}

			});
		attributeGetterFunctions.put(
			"ten",
			new Function<TrungTamHanhChinh, Object>() {

				@Override
				public Object apply(TrungTamHanhChinh trungTamHanhChinh) {
					return trungTamHanhChinh.getTen();
				}

			});
		attributeSetterBiConsumers.put(
			"ten",
			new BiConsumer<TrungTamHanhChinh, Object>() {

				@Override
				public void accept(
					TrungTamHanhChinh trungTamHanhChinh, Object ten) {

					trungTamHanhChinh.setTen((String)ten);
				}

			});
		attributeGetterFunctions.put(
			"donViId",
			new Function<TrungTamHanhChinh, Object>() {

				@Override
				public Object apply(TrungTamHanhChinh trungTamHanhChinh) {
					return trungTamHanhChinh.getDonViId();
				}

			});
		attributeSetterBiConsumers.put(
			"donViId",
			new BiConsumer<TrungTamHanhChinh, Object>() {

				@Override
				public void accept(
					TrungTamHanhChinh trungTamHanhChinh, Object donViId) {

					trungTamHanhChinh.setDonViId((Long)donViId);
				}

			});
		attributeGetterFunctions.put(
			"donViIds",
			new Function<TrungTamHanhChinh, Object>() {

				@Override
				public Object apply(TrungTamHanhChinh trungTamHanhChinh) {
					return trungTamHanhChinh.getDonViIds();
				}

			});
		attributeSetterBiConsumers.put(
			"donViIds",
			new BiConsumer<TrungTamHanhChinh, Object>() {

				@Override
				public void accept(
					TrungTamHanhChinh trungTamHanhChinh, Object donViIds) {

					trungTamHanhChinh.setDonViIds((String)donViIds);
				}

			});
		attributeGetterFunctions.put(
			"thongTinLienHe",
			new Function<TrungTamHanhChinh, Object>() {

				@Override
				public Object apply(TrungTamHanhChinh trungTamHanhChinh) {
					return trungTamHanhChinh.getThongTinLienHe();
				}

			});
		attributeSetterBiConsumers.put(
			"thongTinLienHe",
			new BiConsumer<TrungTamHanhChinh, Object>() {

				@Override
				public void accept(
					TrungTamHanhChinh trungTamHanhChinh,
					Object thongTinLienHe) {

					trungTamHanhChinh.setThongTinLienHe((String)thongTinLienHe);
				}

			});
		attributeGetterFunctions.put(
			"trangThai",
			new Function<TrungTamHanhChinh, Object>() {

				@Override
				public Object apply(TrungTamHanhChinh trungTamHanhChinh) {
					return trungTamHanhChinh.getTrangThai();
				}

			});
		attributeSetterBiConsumers.put(
			"trangThai",
			new BiConsumer<TrungTamHanhChinh, Object>() {

				@Override
				public void accept(
					TrungTamHanhChinh trungTamHanhChinh, Object trangThai) {

					trungTamHanhChinh.setTrangThai((Integer)trangThai);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public String getMa() {
		if (_ma == null) {
			return "";
		}
		else {
			return _ma;
		}
	}

	@Override
	public void setMa(String ma) {
		_columnBitmask |= MA_COLUMN_BITMASK;

		if (_originalMa == null) {
			_originalMa = _ma;
		}

		_ma = ma;
	}

	public String getOriginalMa() {
		return GetterUtil.getString(_originalMa);
	}

	@Override
	public String getTen() {
		if (_ten == null) {
			return "";
		}
		else {
			return _ten;
		}
	}

	@Override
	public void setTen(String ten) {
		_ten = ten;
	}

	@Override
	public long getDonViId() {
		return _donViId;
	}

	@Override
	public void setDonViId(long donViId) {
		_columnBitmask |= DONVIID_COLUMN_BITMASK;

		if (!_setOriginalDonViId) {
			_setOriginalDonViId = true;

			_originalDonViId = _donViId;
		}

		_donViId = donViId;
	}

	public long getOriginalDonViId() {
		return _originalDonViId;
	}

	@Override
	public String getDonViIds() {
		if (_donViIds == null) {
			return "";
		}
		else {
			return _donViIds;
		}
	}

	@Override
	public void setDonViIds(String donViIds) {
		_donViIds = donViIds;
	}

	@Override
	public String getThongTinLienHe() {
		if (_thongTinLienHe == null) {
			return "";
		}
		else {
			return _thongTinLienHe;
		}
	}

	@Override
	public void setThongTinLienHe(String thongTinLienHe) {
		_thongTinLienHe = thongTinLienHe;
	}

	@Override
	public int getTrangThai() {
		return _trangThai;
	}

	@Override
	public void setTrangThai(int trangThai) {
		_trangThai = trangThai;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, TrungTamHanhChinh.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TrungTamHanhChinh toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TrungTamHanhChinhImpl trungTamHanhChinhImpl =
			new TrungTamHanhChinhImpl();

		trungTamHanhChinhImpl.setId(getId());
		trungTamHanhChinhImpl.setMa(getMa());
		trungTamHanhChinhImpl.setTen(getTen());
		trungTamHanhChinhImpl.setDonViId(getDonViId());
		trungTamHanhChinhImpl.setDonViIds(getDonViIds());
		trungTamHanhChinhImpl.setThongTinLienHe(getThongTinLienHe());
		trungTamHanhChinhImpl.setTrangThai(getTrangThai());

		trungTamHanhChinhImpl.resetOriginalValues();

		return trungTamHanhChinhImpl;
	}

	@Override
	public int compareTo(TrungTamHanhChinh trungTamHanhChinh) {
		int value = 0;

		if (getId() < trungTamHanhChinh.getId()) {
			value = -1;
		}
		else if (getId() > trungTamHanhChinh.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TrungTamHanhChinh)) {
			return false;
		}

		TrungTamHanhChinh trungTamHanhChinh = (TrungTamHanhChinh)obj;

		long primaryKey = trungTamHanhChinh.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TrungTamHanhChinhModelImpl trungTamHanhChinhModelImpl = this;

		trungTamHanhChinhModelImpl._originalMa = trungTamHanhChinhModelImpl._ma;

		trungTamHanhChinhModelImpl._originalDonViId =
			trungTamHanhChinhModelImpl._donViId;

		trungTamHanhChinhModelImpl._setOriginalDonViId = false;

		trungTamHanhChinhModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TrungTamHanhChinh> toCacheModel() {
		TrungTamHanhChinhCacheModel trungTamHanhChinhCacheModel =
			new TrungTamHanhChinhCacheModel();

		trungTamHanhChinhCacheModel.id = getId();

		trungTamHanhChinhCacheModel.ma = getMa();

		String ma = trungTamHanhChinhCacheModel.ma;

		if ((ma != null) && (ma.length() == 0)) {
			trungTamHanhChinhCacheModel.ma = null;
		}

		trungTamHanhChinhCacheModel.ten = getTen();

		String ten = trungTamHanhChinhCacheModel.ten;

		if ((ten != null) && (ten.length() == 0)) {
			trungTamHanhChinhCacheModel.ten = null;
		}

		trungTamHanhChinhCacheModel.donViId = getDonViId();

		trungTamHanhChinhCacheModel.donViIds = getDonViIds();

		String donViIds = trungTamHanhChinhCacheModel.donViIds;

		if ((donViIds != null) && (donViIds.length() == 0)) {
			trungTamHanhChinhCacheModel.donViIds = null;
		}

		trungTamHanhChinhCacheModel.thongTinLienHe = getThongTinLienHe();

		String thongTinLienHe = trungTamHanhChinhCacheModel.thongTinLienHe;

		if ((thongTinLienHe != null) && (thongTinLienHe.length() == 0)) {
			trungTamHanhChinhCacheModel.thongTinLienHe = null;
		}

		trungTamHanhChinhCacheModel.trangThai = getTrangThai();

		return trungTamHanhChinhCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TrungTamHanhChinh, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TrungTamHanhChinh, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TrungTamHanhChinh, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((TrungTamHanhChinh)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<TrungTamHanhChinh, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<TrungTamHanhChinh, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TrungTamHanhChinh, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((TrungTamHanhChinh)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, TrungTamHanhChinh>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _id;
	private String _ma;
	private String _originalMa;
	private String _ten;
	private long _donViId;
	private long _originalDonViId;
	private boolean _setOriginalDonViId;
	private String _donViIds;
	private String _thongTinLienHe;
	private int _trangThai;
	private long _columnBitmask;
	private TrungTamHanhChinh _escapedModel;

}