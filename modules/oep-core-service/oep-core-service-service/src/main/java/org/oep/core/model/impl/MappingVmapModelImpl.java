/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.oep.core.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.oep.core.model.MappingVmap;
import org.oep.core.model.MappingVmapModel;

/**
 * The base model implementation for the MappingVmap service. Represents a row in the &quot;idm_mappingvmap&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>MappingVmapModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MappingVmapImpl}.
 * </p>
 *
 * @author manhlb
 * @see MappingVmapImpl
 * @generated
 */
@ProviderType
public class MappingVmapModelImpl
	extends BaseModelImpl<MappingVmap> implements MappingVmapModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mapping vmap model instance should use the <code>MappingVmap</code> interface instead.
	 */
	public static final String TABLE_NAME = "idm_mappingvmap";

	public static final Object[][] TABLE_COLUMNS = {
		{"id", Types.BIGINT}, {"classpk", Types.BIGINT},
		{"classname", Types.VARCHAR}, {"latitude", Types.VARCHAR},
		{"longitude", Types.VARCHAR}, {"ghichu", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classpk", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("latitude", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("longitude", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ghichu", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table idm_mappingvmap (id LONG not null primary key,classpk LONG,classname VARCHAR(75) null,latitude VARCHAR(75) null,longitude VARCHAR(75) null,ghichu VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table idm_mappingvmap";

	public static final String ORDER_BY_JPQL = " ORDER BY mappingVmap.id DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY idm_mappingvmap.id DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		org.oep.core.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.org.oep.core.model.MappingVmap"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		org.oep.core.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.org.oep.core.model.MappingVmap"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		org.oep.core.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.org.oep.core.model.MappingVmap"),
		true);

	public static final long CLASSNAME_COLUMN_BITMASK = 1L;

	public static final long CLASSPK_COLUMN_BITMASK = 2L;

	public static final long ID_COLUMN_BITMASK = 4L;

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		org.oep.core.service.util.ServiceProps.get(
			"lock.expiration.time.org.oep.core.model.MappingVmap"));

	public MappingVmapModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MappingVmap.class;
	}

	@Override
	public String getModelClassName() {
		return MappingVmap.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MappingVmap, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MappingVmap, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MappingVmap, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MappingVmap)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MappingVmap, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MappingVmap, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MappingVmap)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MappingVmap, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MappingVmap, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, MappingVmap>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			MappingVmap.class.getClassLoader(), MappingVmap.class,
			ModelWrapper.class);

		try {
			Constructor<MappingVmap> constructor =
				(Constructor<MappingVmap>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<MappingVmap, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MappingVmap, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MappingVmap, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<MappingVmap, Object>>();
		Map<String, BiConsumer<MappingVmap, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<MappingVmap, ?>>();

		attributeGetterFunctions.put(
			"id",
			new Function<MappingVmap, Object>() {

				@Override
				public Object apply(MappingVmap mappingVmap) {
					return mappingVmap.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<MappingVmap, Object>() {

				@Override
				public void accept(MappingVmap mappingVmap, Object id) {
					mappingVmap.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"classpk",
			new Function<MappingVmap, Object>() {

				@Override
				public Object apply(MappingVmap mappingVmap) {
					return mappingVmap.getClasspk();
				}

			});
		attributeSetterBiConsumers.put(
			"classpk",
			new BiConsumer<MappingVmap, Object>() {

				@Override
				public void accept(MappingVmap mappingVmap, Object classpk) {
					mappingVmap.setClasspk((Long)classpk);
				}

			});
		attributeGetterFunctions.put(
			"classname",
			new Function<MappingVmap, Object>() {

				@Override
				public Object apply(MappingVmap mappingVmap) {
					return mappingVmap.getClassname();
				}

			});
		attributeSetterBiConsumers.put(
			"classname",
			new BiConsumer<MappingVmap, Object>() {

				@Override
				public void accept(MappingVmap mappingVmap, Object classname) {
					mappingVmap.setClassname((String)classname);
				}

			});
		attributeGetterFunctions.put(
			"latitude",
			new Function<MappingVmap, Object>() {

				@Override
				public Object apply(MappingVmap mappingVmap) {
					return mappingVmap.getLatitude();
				}

			});
		attributeSetterBiConsumers.put(
			"latitude",
			new BiConsumer<MappingVmap, Object>() {

				@Override
				public void accept(MappingVmap mappingVmap, Object latitude) {
					mappingVmap.setLatitude((String)latitude);
				}

			});
		attributeGetterFunctions.put(
			"longitude",
			new Function<MappingVmap, Object>() {

				@Override
				public Object apply(MappingVmap mappingVmap) {
					return mappingVmap.getLongitude();
				}

			});
		attributeSetterBiConsumers.put(
			"longitude",
			new BiConsumer<MappingVmap, Object>() {

				@Override
				public void accept(MappingVmap mappingVmap, Object longitude) {
					mappingVmap.setLongitude((String)longitude);
				}

			});
		attributeGetterFunctions.put(
			"ghichu",
			new Function<MappingVmap, Object>() {

				@Override
				public Object apply(MappingVmap mappingVmap) {
					return mappingVmap.getGhichu();
				}

			});
		attributeSetterBiConsumers.put(
			"ghichu",
			new BiConsumer<MappingVmap, Object>() {

				@Override
				public void accept(MappingVmap mappingVmap, Object ghichu) {
					mappingVmap.setGhichu((String)ghichu);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public long getClasspk() {
		return _classpk;
	}

	@Override
	public void setClasspk(long classpk) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClasspk) {
			_setOriginalClasspk = true;

			_originalClasspk = _classpk;
		}

		_classpk = classpk;
	}

	public long getOriginalClasspk() {
		return _originalClasspk;
	}

	@Override
	public String getClassname() {
		if (_classname == null) {
			return "";
		}
		else {
			return _classname;
		}
	}

	@Override
	public void setClassname(String classname) {
		_columnBitmask |= CLASSNAME_COLUMN_BITMASK;

		if (_originalClassname == null) {
			_originalClassname = _classname;
		}

		_classname = classname;
	}

	public String getOriginalClassname() {
		return GetterUtil.getString(_originalClassname);
	}

	@Override
	public String getLatitude() {
		if (_latitude == null) {
			return "";
		}
		else {
			return _latitude;
		}
	}

	@Override
	public void setLatitude(String latitude) {
		_latitude = latitude;
	}

	@Override
	public String getLongitude() {
		if (_longitude == null) {
			return "";
		}
		else {
			return _longitude;
		}
	}

	@Override
	public void setLongitude(String longitude) {
		_longitude = longitude;
	}

	@Override
	public String getGhichu() {
		if (_ghichu == null) {
			return "";
		}
		else {
			return _ghichu;
		}
	}

	@Override
	public void setGhichu(String ghichu) {
		_ghichu = ghichu;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, MappingVmap.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MappingVmap toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = _escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MappingVmapImpl mappingVmapImpl = new MappingVmapImpl();

		mappingVmapImpl.setId(getId());
		mappingVmapImpl.setClasspk(getClasspk());
		mappingVmapImpl.setClassname(getClassname());
		mappingVmapImpl.setLatitude(getLatitude());
		mappingVmapImpl.setLongitude(getLongitude());
		mappingVmapImpl.setGhichu(getGhichu());

		mappingVmapImpl.resetOriginalValues();

		return mappingVmapImpl;
	}

	@Override
	public int compareTo(MappingVmap mappingVmap) {
		int value = 0;

		if (getId() < mappingVmap.getId()) {
			value = -1;
		}
		else if (getId() > mappingVmap.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof MappingVmap)) {
			return false;
		}

		MappingVmap mappingVmap = (MappingVmap)obj;

		long primaryKey = mappingVmap.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		MappingVmapModelImpl mappingVmapModelImpl = this;

		mappingVmapModelImpl._originalClasspk = mappingVmapModelImpl._classpk;

		mappingVmapModelImpl._setOriginalClasspk = false;

		mappingVmapModelImpl._originalClassname =
			mappingVmapModelImpl._classname;

		mappingVmapModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MappingVmap> toCacheModel() {
		MappingVmapCacheModel mappingVmapCacheModel =
			new MappingVmapCacheModel();

		mappingVmapCacheModel.id = getId();

		mappingVmapCacheModel.classpk = getClasspk();

		mappingVmapCacheModel.classname = getClassname();

		String classname = mappingVmapCacheModel.classname;

		if ((classname != null) && (classname.length() == 0)) {
			mappingVmapCacheModel.classname = null;
		}

		mappingVmapCacheModel.latitude = getLatitude();

		String latitude = mappingVmapCacheModel.latitude;

		if ((latitude != null) && (latitude.length() == 0)) {
			mappingVmapCacheModel.latitude = null;
		}

		mappingVmapCacheModel.longitude = getLongitude();

		String longitude = mappingVmapCacheModel.longitude;

		if ((longitude != null) && (longitude.length() == 0)) {
			mappingVmapCacheModel.longitude = null;
		}

		mappingVmapCacheModel.ghichu = getGhichu();

		String ghichu = mappingVmapCacheModel.ghichu;

		if ((ghichu != null) && (ghichu.length() == 0)) {
			mappingVmapCacheModel.ghichu = null;
		}

		return mappingVmapCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MappingVmap, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MappingVmap, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MappingVmap, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((MappingVmap)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<MappingVmap, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<MappingVmap, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MappingVmap, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((MappingVmap)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final Function<InvocationHandler, MappingVmap>
		_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	private long _id;
	private long _classpk;
	private long _originalClasspk;
	private boolean _setOriginalClasspk;
	private String _classname;
	private String _originalClassname;
	private String _latitude;
	private String _longitude;
	private String _ghichu;
	private long _columnBitmask;
	private MappingVmap _escapedModel;

}